; C Token Macros
; These macros are expanded by Source Insight prior to parsing C and C++ files.

; AtlCom Property Map
BEGIN_PROPERTY_MAP(theClass)
BEGIN_PROP_MAP(theClass)
PROP_ENTRY(szDesc, dispid, clsid)
PROP_ENTRY_EX(szDesc, dispid, clsid, iidDispatch)
PROP_PAGE(clsid)
PROP_DATA_ENTRY(szDesc, member, vt)
END_PROPERTY_MAP()
END_PROP_MAP()


; COM Map
BEGIN_COM_MAP(x)
DECLARE_GET_CONTROLLING_UNKNOWN()
_ATL_IIDOF(x)
COM_INTERFACE_ENTRY_BREAK(x)
COM_INTERFACE_ENTRY_NOINTERFACE(x)
COM_INTERFACE_ENTRY(x)
COM_INTERFACE_ENTRY_IID(iid, x)
COM_INTERFACE_ENTRY_IMPL(x)
COM_INTERFACE_ENTRY_IMPL_IID(iid, x)
COM_INTERFACE_ENTRY2(x, x2)
COM_INTERFACE_ENTRY2_IID(iid, x, x2)
COM_INTERFACE_ENTRY_FUNC(iid, dw, func)
COM_INTERFACE_ENTRY_FUNC_BLIND(dw, func)
COM_INTERFACE_ENTRY_TEAR_OFF(iid, x)
COM_INTERFACE_ENTRY_CACHED_TEAR_OFF(iid, x, punk)
COM_INTERFACE_ENTRY_AGGREGATE(iid, punk)
COM_INTERFACE_ENTRY_AGGREGATE_BLIND(punk)
COM_INTERFACE_ENTRY_AUTOAGGREGATE(iid, punk, clsid)
COM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND(punk, clsid)
COM_INTERFACE_ENTRY_CHAIN(classname)
END_COM_MAP()


BEGIN_CATEGORY_MAP(x)
IMPLEMENTED_CATEGORY( catid )
REQUIRED_CATEGORY( catid )
END_CATEGORY_MAP()
BEGIN_OBJECT_MAP(x)
END_OBJECT_MAP()

OBJECT_ENTRY(clsid, class)
OBJECT_ENTRY_NON_CREATEABLE(class)

DECLARE_CLASSFACTORY_SINGLETON(obj)
DECLARE_OBJECT_DESCRIPTION(x)
DECLARE_NO_REGISTRY()
DECLARE_REGISTRY(class, pid, vpid, nid, flags)
DECLARE_REGISTRY_RESOURCE(x)
DECLARE_REGISTRY_RESOURCEID(x)
DECLARE_STATIC_REGISTRY_RESOURCE(x)
DECLARE_STATIC_REGISTRY_RESOURCEID(x)


BEGIN_SERVICE_MAP(x)
SERVICE_ENTRY(x)
SERVICE_ENTRY_CHAIN(x)
END_SERVICE_MAP()

BEGIN_SINK_MAP(_class)
SINK_ENTRY_INFO(id, iid, dispid, fn, info)
SINK_ENTRY_EX(id, iid, dispid, fn)
SINK_ENTRY(id, dispid, fn)
END_SINK_MAP()

; GNU Stuff
__attribute__(x)


; Misc
__declspec(name)
__RPC_FAR
CALLBACK
EXPORT
FAR
far
FASTCALL __fastcall	
NEAR
PASCAL
SIZE_T_MAX  UINT_MAX
UNALIGNED
ATL_NO_VTABLE 
AFX_API_EXPORT
AFX_API_IMPORT
AFX_CDECL __cdecl
AFX_CLASS_EXPORT 
AFX_CLASS_IMPORT 
AFX_COMDAT 
AFX_CORE_DATA
AFX_CORE_DATADEF
AFX_DATA
AFX_DATA_EXPORT 
AFX_DATA_IMPORT 
AFX_DATADEF
AFX_DB_DATA
AFX_DB_DATADEF
AFX_EXPORT EXPORT
AFX_EXT_API
AFX_EXT_CLASS
AFX_EXT_DATA
AFX_EXT_DATADEF
AFX_NET_DATA
AFX_NET_DATADEF
AFX_NOVTABLE
AFX_OLE_DATA
AFX_OLE_DATADEF
AFX_STATIC extern
AFX_STATIC_DATA extern 
AFXAPI __stdcall
AFXOLEAPI __stdcall
BASED_CODE
BASED_DEBUG
BASED_STACK
BEGIN_DUAL_INTERFACE_PART(localClass, baseClass) class X##localClass : public baseClass { public: BEGIN_COM_MAP(X##localClass, localClass) COM_INTERFACE_ENTRY (baseClass) END_COM_MAP()
BEGIN_INTERFACE_PART(localClass, baseClass) class X##localClass : public baseClass 	{ public: BEGIN_COM_MAP(X##localClass, localClass) COM_INTERFACE_ENTRY (baseClass) END_COM_MAP() public: virtual ULONG STDMETHODCALLTYPE AddRef(); virtual ULONG STDMETHODCALLTYPE Release(); virtual HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, void * * ppvObj);
BEGIN_CONNECTION_PART(theClass, localClass) class X##localClass : public CConnectionPoint { public: X##localClass() { m_nOffset = offsetof(theClass, m_x##localClass); }
CDECL __cdecl
CONNECTION_IID(iid) REFIID GetIID() { return iid; }
DECLARE_AGGREGATABLE(x)
DECLARE_CLASSFACTORY_EX(cf)
DECLARE_CLASSFACTORY()
DECLARE_CLASSFACTORY2(lic)
DECLARE_CLASSFACTORY_AUTO_THREAD()
DECLARE_CONNECTION_MAP()
DECLARE_DISPATCH_MAP()
DECLARE_DUAL_ERRORINFO()
DECLARE_DYNAMIC(class_name)
DECLARE_DYNCREATE(class_name)
DECLARE_EMPTY_MSG_MAP()
DECLARE_EVENT_MAP()
DECLARE_EVENTSINK_MAP()
DECLARE_HANDLE(x)	typedef HANDLE x
DECLARE_HANDLE32(x)
DECLARE_INTERFACE(iface)    interface iface
DECLARE_INTERFACE_(iface, baseiface)    interface iface : public baseiface
DECLARE_INTERFACE_MAP()
DECLARE_MAPI_INTERFACE_(iface, baseiface)	interface iface : public baseiface
DECLARE_MAPI_INTERFACE_PTR(iface, piface)  typedef interface iface iface, FAR * piface
DECLARE_MESSAGE_MAP()
DECLARE_NOT_AGGREGATABLE(x)
DECLARE_OLECMD_MAP()
DECLARE_OLECREATE(class_name)
DECLARE_OLECREATE_EX(class_name)
DECLARE_OLECTLTYPE(class_name)
DECLARE_OLETYPELIB(class_name)
DECLARE_ONLY_AGGREGATABLE(x)
DECLARE_OPAQUE32(x)
DECLARE_PARSE_MAP()
DECLARE_POLY_AGGREGATABLE(x)
DECLARE_PROPERTY_SUPPORT(class)
DECLARE_PROPPAGEIDS(class_name)
DECLARE_PROTECT_FINAL_CONSTRUCT()
DECLARE_REGISTRY(class, pid, vpid, nid, flags)
DECLARE_REGISTRY_RESOURCE(x)
DECLARE_SERIAL(class_name)
DECLARE_WND_CLASS(WndClassName)
DECLARE_WND_SUPERCLASS(WndClassName, OrigWndClassName)
DELEGATE_DUAL_INTERFACE(objectClass, dualClass)
END_CONNECTION_PART(localClass) } m_x##localClass; friend class X##localClass;
END_DUAL_INTERFACE_PART(localClass) 	} m_x##localClass; friend class X##localClass;
END_INTERFACE_PART(localClass) 	} m_x##localClass; friend class X##localClass;
EXTERN_C extern
EXTERN_PROCESS_LOCAL(class_name, ident_name) extern AFX_DATA AFX_DATADEF CProcessLocal<class_name> ident_name;
IMPLEMENT_DUAL_ERRORINFO(objectClass, riidSource)
IMPLEMENT_DYNAMIC(class_name, base_class_name)
IMPLEMENT_DYNCREATE(class_name, base_class_name)
IMPLEMENT_OLECREATE(class_name, external_name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)
IMPLEMENT_OLECREATE_EX(class_name, external_name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)
IMPLEMENT_OLECTLTYPE(class_name, idsUserTypeName, dwOleMisc)
IMPLEMENT_OLETYPELIB(class_name, tlid, wVerMajor, wVerMinor)
IMPLEMENT_SERIAL(class_name, base_class_name, wSchema)
INIT_INTERFACE_PART(theClass, localClass)
MAPIMETHOD(method)   virtual HRESULT STDMETHODCALLTYPE method
MAPIMETHOD_(type, method) virtual type STDMETHODCALLTYPE method
MAPIMETHOD_DECLARE(type, method, prefix)  type STDMETHODCALLTYPE
MIDL_INTERFACE(x)   struct
PROCESS_LOCAL(class_name, ident_name) AFX_DATADEF CProcessLocal<class_name> ident_name;
PURE                    = 0
STDMETHOD(method)       virtual HRESULT STDMETHODCALLTYPE method
STDMETHOD_(type,method) virtual type STDMETHODCALLTYPE method
STDMETHODIMP_(type)     type STDMETHODCALLTYPE
STDMETHODIMP	HRESULT STDMETHODCALLTYPE
SQLOLE_HELPID(id)
THIS                    void
THIS_
TRY try {
END_TRY }
CATCH(class_name, e) } catch (class_name * e) {
AND_CATCH(class_name, e) } catch (class_name * e) {
END_CATCH }
CATCH_ALL(e) } catch (CException* e) {
AND_CATCH_ALL(e) } catch (CException* e) {
END_CATCH_ALL }
NTAPI *

__success(x)
SHSTDAPI 
SHSTDAPI_(x) 
__success(expr)
__nullterminated
__nullnullterminated
__reserved
__checkReturn
__typefix(ctype)
__override
__callback
__format_string
__blocksOn(resource)
__control_entrypoint(category)
__data_entrypoint(category)

; STD Include 
_STD_BEGIN namespace std {
_STD_END } ;
_STD std::
_TRY_BEGIN	try {
_CATCH(x)	} catch (x) {
_CATCH_ALL	} catch (...) {
_CATCH_END	}
_CATCH_IO_(x)
_RAISE(x)	throw (x)
_RERAISE	throw
_THROW0()	throw ()
_THROW1(x)	throw (x)
_THROW(x, y)	throw x(y)
_BITMASK(E, T) 	typedef int T
_BITMASK_OPS(T)
_TDEF(x)		= x
_TDEF2(x, y)	= x, y
_CNTSIZ(iter)	ptrdiff_t
_STCONS(ty, name, val)	enum {name = val}
_TRY_IO_BEGIN	
_CATCH_IO_END	
_CATCH_IO_(x)	 


; Other Keywords
volatile
__packed 
__abstract
__box
__delegate
__event
__finally
__gc
__identifier
__interface
__nogc
__pin
__property
__sealed
__try_cast
__typeof
__value
_packed 
packed 

; sal.h
_In_
_In_opt_
_In_z_
_In_opt_z_


_In_count_(size)
_In_opt_count_(size)
_In_bytecount_(size)
_In_opt_bytecount_(size)

_In_count_c_(size)
_In_opt_count_c_(size)
_In_bytecount_c_(size)
_In_opt_bytecount_c_(size)


_In_z_count_(size)
_In_opt_z_count_(size)
_In_z_bytecount_(size)
_In_opt_z_bytecount_(size)

_In_z_count_c_(size)
_In_opt_z_count_c_(size)
_In_z_bytecount_c_(size)
_In_opt_z_bytecount_c_(size)

_In_ptrdiff_count_(size)
_In_opt_ptrdiff_count_(size)

_In_count_x_(size)
_In_opt_count_x_(size)
_In_bytecount_x_(size)
_In_opt_bytecount_x_(size)

_Out_
_Out_opt_

_Out_cap_(size)
_Out_opt_cap_(size)
_Out_bytecap_(size)
_Out_opt_bytecap_(size)

_Out_cap_c_(size)
_Out_opt_cap_c_(size)
_Out_bytecap_c_(size)
_Out_opt_bytecap_c_(size)

_Out_cap_m_(mult,size)
_Out_opt_cap_m_(mult,size)
_Out_z_cap_m_(mult,size)
_Out_opt_z_cap_m_(mult,size)

_Out_ptrdiff_cap_(size)
_Out_opt_ptrdiff_cap_(size)

_Out_cap_x_(size)
_Out_opt_cap_x_(size)
_Out_bytecap_x_(size)
_Out_opt_bytecap_x_(size)

_Out_z_cap_(size)
_Out_opt_z_cap_(size)
_Out_z_bytecap_(size)
_Out_opt_z_bytecap_(size)

_Out_z_cap_c_(size)
_Out_opt_z_cap_c_(size)
_Out_z_bytecap_c_(size)
_Out_opt_z_bytecap_c_(size)

_Out_z_cap_x_(size)
_Out_opt_z_cap_x_(size)
_Out_z_bytecap_x_(size)
_Out_opt_z_bytecap_x_(size)

_Out_cap_post_count_(cap,count)
_Out_opt_cap_post_count_(cap,count)
_Out_bytecap_post_bytecount_(cap,count)
_Out_opt_bytecap_post_bytecount_(cap,count)

_Out_z_cap_post_count_(cap,count)
_Out_opt_z_cap_post_count_(cap,count)
_Out_z_bytecap_post_bytecount_(cap,count)
_Out_opt_z_bytecap_post_bytecount_(cap,count)

_Out_capcount_(capcount)
_Out_opt_capcount_(capcount)
_Out_bytecapcount_(capcount)
_Out_opt_bytecapcount_(capcount)

_Out_capcount_x_(capcount)
_Out_opt_capcount_x_(capcount)
_Out_bytecapcount_x_(capcount)
_Out_opt_bytecapcount_x_(capcount)

_Out_z_capcount_(capcount)
_Out_opt_z_capcount_(capcount)
_Out_z_bytecapcount_(capcount)
_Out_opt_z_bytecapcount_(capcount)

_Inout_
_Inout_opt_

_Inout_z_
_Inout_opt_z_

_Inout_count_(size)
_Inout_opt_count_(size)
_Inout_bytecount_(size)
_Inout_opt_bytecount_(size)

_Inout_count_c_(size)
_Inout_opt_count_c_(size)
_Inout_bytecount_c_(size)
_Inout_opt_bytecount_c_(size)

_Inout_z_count_(size)
_Inout_opt_z_count_(size)
_Inout_z_bytecount_(size)
_Inout_opt_z_bytecount_(size)

_Inout_z_count_c_(size)
_Inout_opt_z_count_c_(size)
_Inout_z_bytecount_c_(size)
_Inout_opt_z_bytecount_c_(size)

_Inout_ptrdiff_count_(size)
_Inout_opt_ptrdiff_count_(size)

_Inout_count_x_(size)
_Inout_opt_count_x_(size)
_Inout_bytecount_x_(size)
_Inout_opt_bytecount_x_(size)

_Inout_cap_(size)
_Inout_opt_cap_(size)
_Inout_bytecap_(size)
_Inout_opt_bytecap_(size)

_Inout_cap_c_(size)
_Inout_opt_cap_c_(size)
_Inout_bytecap_c_(size)
_Inout_opt_bytecap_c_(size)

_Inout_cap_x_(size)
_Inout_opt_cap_x_(size)
_Inout_bytecap_x_(size)
_Inout_opt_bytecap_x_(size)

_Inout_z_cap_(size)
_Inout_opt_z_cap_(size)
_Inout_z_bytecap_(size)
_Inout_opt_z_bytecap_(size)

_Inout_z_cap_c_(size)
_Inout_opt_z_cap_c_(size)
_Inout_z_bytecap_c_(size)
_Inout_opt_z_bytecap_c_(size)

_Inout_z_cap_x_(size)
_Inout_opt_z_cap_x_(size)
_Inout_z_bytecap_x_(size)
_Inout_opt_z_bytecap_x_(size)


_Ret_
_Ret_opt_



_Deref_out_
_Deref_out_opt_
_Deref_opt_out_
_Deref_opt_out_opt_

_Deref_out_z_
_Deref_out_opt_z_
_Deref_opt_out_z_
_Deref_opt_out_opt_z_



_Check_return_

_Printf_format_string_
_Scanf_format_string_
_Scanf_s_format_string_
_FormatMessage_format_string_

_Success_(expr)

_In_bound_
_Out_bound_
_Ret_bound_
_Deref_in_bound_
_Deref_out_bound_
_Deref_inout_bound_
_Deref_ret_bound_

_In_range_(lb,ub)
_Out_range_(lb,ub)
_Ret_range_(lb,ub)
_Deref_in_range_(lb,ub)
_Deref_out_range_(lb,ub)
_Deref_ret_range_(lb,ub)



_Pre_z_
_Pre_opt_z_

_Pre_cap_(size)
_Pre_opt_cap_(size)
_Pre_bytecap_(size)
_Pre_opt_bytecap_(size)

_Pre_cap_c_(size)
_Pre_opt_cap_c_(size)
_Pre_bytecap_c_(size)
_Pre_opt_bytecap_c_(size)

_Pre_cap_m_(mult,size)
_Pre_opt_cap_m_(mult,size)

_Pre_cap_for_(param)
_Pre_opt_cap_for_(param)

_Pre_cap_x_(size)
_Pre_opt_cap_x_(size)
_Pre_bytecap_x_(size)
_Pre_opt_bytecap_x_(size)

_Pre_ptrdiff_cap_(ptr)
_Pre_opt_ptrdiff_cap_(ptr)

_Pre_z_cap_(size)
_Pre_opt_z_cap_(size)
_Pre_z_bytecap_(size)
_Pre_opt_z_bytecap_(size)

_Pre_z_cap_c_(size)
_Pre_opt_z_cap_c_(size)
_Pre_z_bytecap_c_(size)
_Pre_opt_z_bytecap_c_(size)

_Pre_z_cap_x_(size)
_Pre_opt_z_cap_x_(size)
_Pre_z_bytecap_x_(size)
_Pre_opt_z_bytecap_x_(size)

_Pre_valid_cap_(size)
_Pre_opt_valid_cap_(size)
_Pre_valid_bytecap_(size)
_Pre_opt_valid_bytecap_(size)

_Pre_valid_cap_c_(size)
_Pre_opt_valid_cap_c_(size)
_Pre_valid_bytecap_c_(size)
_Pre_opt_valid_bytecap_c_(size)

_Pre_valid_cap_x_(size)
_Pre_opt_valid_cap_x_(size)
_Pre_valid_bytecap_x_(size)
_Pre_opt_valid_bytecap_x_(size)

_Pre_count_(size)
_Pre_opt_count_(size)
_Pre_bytecount_(size)
_Pre_opt_bytecount_(size)

_Pre_count_c_(size)
_Pre_opt_count_c_(size)
_Pre_bytecount_c_(size)
_Pre_opt_bytecount_c_(size)

_Pre_count_x_(size)
_Pre_opt_count_x_(size)
_Pre_bytecount_x_(size)
_Pre_opt_bytecount_x_(size)

_Pre_ptrdiff_count_(ptr)
_Pre_opt_ptrdiff_count_(ptr)

_Pre_valid_
_Pre_opt_valid_

_Pre_invalid_

_Pre_notnull_
_Pre_maybenull_
_Pre_null_

_Pre_readonly_
_Pre_writeonly_

_Post_z_

_Post_maybez_

_Post_cap_(size)
_Post_bytecap_(size)

_Post_count_(size)
_Post_bytecount_(size)
_Post_count_c_(size)
_Post_bytecount_c_(size)
_Post_count_x_(size)
_Post_bytecount_x_(size)

_Post_z_count_(size)
_Post_z_bytecount_(size)
_Post_z_count_c_(size)
_Post_z_bytecount_c_(size)
_Post_z_count_x_(size)
_Post_z_bytecount_x_(size)

_Post_ptr_invalid_

_Post_valid_
_Post_invalid_

_Post_notnull_


_Ret_z_
_Ret_opt_z_

_Ret_cap_(size)
_Ret_opt_cap_(size)
_Ret_bytecap_(size)
_Ret_opt_bytecap_(size)

_Ret_cap_c_(size)
_Ret_opt_cap_c_(size)
_Ret_bytecap_c_(size)
_Ret_opt_bytecap_c_(size)

_Ret_cap_x_(size)
_Ret_opt_cap_x_(size)
_Ret_bytecap_x_(size)
_Ret_opt_bytecap_x_(size)

_Ret_z_cap_(size)
_Ret_opt_z_cap_(size)
_Ret_z_bytecap_(size)
_Ret_opt_z_bytecap_(size)

_Ret_count_(size)
_Ret_opt_count_(size)
_Ret_bytecount_(size)
_Ret_opt_bytecount_(size)

_Ret_count_c_(size)
_Ret_opt_count_c_(size)
_Ret_bytecount_c_(size)
_Ret_opt_bytecount_c_(size)

_Ret_count_x_(size)
_Ret_opt_count_x_(size)
_Ret_bytecount_x_(size)
_Ret_opt_bytecount_x_(size)

_Ret_z_count_(size)
_Ret_opt_z_count_(size)
_Ret_z_bytecount_(size)
_Ret_opt_z_bytecount_(size)

_Ret_valid_
_Ret_opt_valid_

_Ret_notnull_
_Ret_maybenull_
_Ret_null_


_Deref_pre_z_
_Deref_pre_opt_z_

_Deref_pre_cap_(size)
_Deref_pre_opt_cap_(size)
_Deref_pre_bytecap_(size)
_Deref_pre_opt_bytecap_(size)

_Deref_pre_cap_c_(size)
_Deref_pre_opt_cap_c_(size)
_Deref_pre_bytecap_c_(size)
_Deref_pre_opt_bytecap_c_(size)

_Deref_pre_cap_x_(size)
_Deref_pre_opt_cap_x_(size)
_Deref_pre_bytecap_x_(size)
_Deref_pre_opt_bytecap_x_(size)

_Deref_pre_z_cap_(size)
_Deref_pre_opt_z_cap_(size)
_Deref_pre_z_bytecap_(size)
_Deref_pre_opt_z_bytecap_(size)

_Deref_pre_z_cap_c_(size)
_Deref_pre_opt_z_cap_c_(size)
_Deref_pre_z_bytecap_c_(size)
_Deref_pre_opt_z_bytecap_c_(size)

_Deref_pre_z_cap_x_(size)
_Deref_pre_opt_z_cap_x_(size)
_Deref_pre_z_bytecap_x_(size)
_Deref_pre_opt_z_bytecap_x_(size)

_Deref_pre_valid_cap_(size)
_Deref_pre_opt_valid_cap_(size)
_Deref_pre_valid_bytecap_(size)
_Deref_pre_opt_valid_bytecap_(size)

_Deref_pre_valid_cap_c_(size)
_Deref_pre_opt_valid_cap_c_(size)
_Deref_pre_valid_bytecap_c_(size)
_Deref_pre_opt_valid_bytecap_c_(size)

_Deref_pre_valid_cap_x_(size)
_Deref_pre_opt_valid_cap_x_(size)
_Deref_pre_valid_bytecap_x_(size)
_Deref_pre_opt_valid_bytecap_x_(size)

_Deref_pre_count_(size)
_Deref_pre_opt_count_(size)
_Deref_pre_bytecount_(size)
_Deref_pre_opt_bytecount_(size)

_Deref_pre_count_c_(size)
_Deref_pre_opt_count_c_(size)
_Deref_pre_bytecount_c_(size)
_Deref_pre_opt_bytecount_c_(size)

_Deref_pre_count_x_(size)
_Deref_pre_opt_count_x_(size)
_Deref_pre_bytecount_x_(size)
_Deref_pre_opt_bytecount_x_(size)

_Deref_pre_valid_
_Deref_pre_opt_valid_
_Deref_pre_invalid_

_Deref_pre_notnull_
_Deref_pre_maybenull_
_Deref_pre_null_

_Deref_pre_readonly_
_Deref_pre_writeonly_


_Deref_post_z_
_Deref_post_opt_z_

_Deref_post_cap_(size)
_Deref_post_opt_cap_(size)
_Deref_post_bytecap_(size)
_Deref_post_opt_bytecap_(size)

_Deref_post_cap_c_(size)
_Deref_post_opt_cap_c_(size)
_Deref_post_bytecap_c_(size)
_Deref_post_opt_bytecap_c_(size)

_Deref_post_cap_x_(size)
_Deref_post_opt_cap_x_(size)
_Deref_post_bytecap_x_(size)
_Deref_post_opt_bytecap_x_(size)

_Deref_post_z_cap_(size)
_Deref_post_opt_z_cap_(size)
_Deref_post_z_bytecap_(size)
_Deref_post_opt_z_bytecap_(size)

_Deref_post_z_cap_c_(size)
_Deref_post_opt_z_cap_c_(size)
_Deref_post_z_bytecap_c_(size)
_Deref_post_opt_z_bytecap_c_(size)

_Deref_post_z_cap_x_(size)
_Deref_post_opt_z_cap_x_(size)
_Deref_post_z_bytecap_x_(size)
_Deref_post_opt_z_bytecap_x_(size)

_Deref_post_valid_cap_(size)
_Deref_post_opt_valid_cap_(size)
_Deref_post_valid_bytecap_(size)
_Deref_post_opt_valid_bytecap_(size)
                                                
_Deref_post_valid_cap_c_(size)
_Deref_post_opt_valid_cap_c_(size)
_Deref_post_valid_bytecap_c_(size)
_Deref_post_opt_valid_bytecap_c_(size)
                                                
_Deref_post_valid_cap_x_(size)
_Deref_post_opt_valid_cap_x_(size)
_Deref_post_valid_bytecap_x_(size)
_Deref_post_opt_valid_bytecap_x_(size)

_Deref_post_count_(size)
_Deref_post_opt_count_(size)
_Deref_post_bytecount_(size)
_Deref_post_opt_bytecount_(size)

_Deref_post_count_c_(size)
_Deref_post_opt_count_c_(size)
_Deref_post_bytecount_c_(size)
_Deref_post_opt_bytecount_c_(size)

_Deref_post_count_x_(size)
_Deref_post_opt_count_x_(size)
_Deref_post_bytecount_x_(size)
_Deref_post_opt_bytecount_x_(size)

_Deref_post_valid_
_Deref_post_opt_valid_

_Deref_post_notnull_
_Deref_post_maybenull_
_Deref_post_null_


_Deref_ret_z_
_Deref_ret_opt_z_

_Deref2_pre_readonly_                   _Deref2_pre1_impl_(_$readaccess)



_Prepost_z_
_Prepost_opt_z_

_Prepost_count_(size)
_Prepost_opt_count_(size)
_Prepost_bytecount_(size)
_Prepost_opt_bytecount_(size)
_Prepost_count_c_(size)
_Prepost_opt_count_c_(size)
_Prepost_bytecount_c_(size)
_Prepost_opt_bytecount_c_(size)
_Prepost_count_x_(size)
_Prepost_opt_count_x_(size)
_Prepost_bytecount_x_(size)
_Prepost_opt_bytecount_x_(size)

_Prepost_valid_
_Prepost_opt_valid_


_Deref_prepost_z_
_Deref_prepost_opt_z_

_Deref_prepost_cap_(size)
_Deref_prepost_opt_cap_(size)
_Deref_prepost_bytecap_(size)
_Deref_prepost_opt_bytecap_(size)

_Deref_prepost_cap_x_(size)
_Deref_prepost_opt_cap_x_(size)
_Deref_prepost_bytecap_x_(size)
_Deref_prepost_opt_bytecap_x_(size)

_Deref_prepost_z_cap_(size)
_Deref_prepost_opt_z_cap_(size)
_Deref_prepost_z_bytecap_(size)
_Deref_prepost_opt_z_bytecap_(size)

_Deref_prepost_valid_cap_(size)
_Deref_prepost_opt_valid_cap_(size)
_Deref_prepost_valid_bytecap_(size)
_Deref_prepost_opt_valid_bytecap_(size)

_Deref_prepost_valid_cap_x_(size)
_Deref_prepost_opt_valid_cap_x_(size)
_Deref_prepost_valid_bytecap_x_(size)
_Deref_prepost_opt_valid_bytecap_x_(size)

_Deref_prepost_count_(size)
_Deref_prepost_opt_count_(size)
_Deref_prepost_bytecount_(size)
_Deref_prepost_opt_bytecount_(size)

_Deref_prepost_count_x_(size)
_Deref_prepost_opt_count_x_(size)
_Deref_prepost_bytecount_x_(size)
_Deref_prepost_opt_bytecount_x_(size)

_Deref_prepost_valid_
_Deref_prepost_opt_valid_


_Deref_out_z_cap_c_(size)
_Deref_inout_z_cap_c_(size)
_Deref_out_z_bytecap_c_(size)
_Deref_inout_z_bytecap_c_(size)
_Deref_inout_z_
_Check_return_impl_

_Success_impl_(expr)

_Printf_format_string_impl_
_Scanf_format_string_impl_
_Scanf_s_format_string_impl_

_In_bound_impl_
_Out_bound_impl_
_Ret_bound_impl_
_Deref_in_bound_impl_
_Deref_out_bound_impl_
_Deref_ret_bound_impl_

_In_range_impl_(min,max)
_Out_range_impl_(min,max)
_Ret_range_impl_(min,max)
_Deref_in_range_impl_(min,max)
_Deref_out_range_impl_(min,max)
_Deref_ret_range_impl_(min,max)

_$valid
_$maybevalid
_$notvalid

_$null
_$maybenull
_$notnull

_$zterm
_$maybezterm
_$notzterm

_$readaccess
_$writeaccess

_$cap(size)
_$cap_c(size)
_$cap_for(param)
_$cap_x(size)

_$bytecap(size)
_$bytecap_c(size)
_$bytecap_x(size)

_$mult(mult,size)

_$count(size)
_$count_c(size)
_$count_x(size)

_$bytecount(size)
_$bytecount_c(size)
_$bytecount_x(size)

_Pre1_impl_(p1)
_Pre2_impl_(p1,p2)
_Pre3_impl_(p1,p2,p3)

_Post1_impl_(p1)
_Post2_impl_(p1,p2)
_Post3_impl_(p1,p2,p3)

_Ret1_impl_(p1)
_Ret2_impl_(p1,p2)
_Ret3_impl_(p1,p2,p3)

_Deref_pre1_impl_(p1)
_Deref_pre2_impl_(p1,p2)
_Deref_pre3_impl_(p1,p2,p3)

_Deref_post1_impl_(p1)
_Deref_post2_impl_(p1,p2)
_Deref_post3_impl_(p1,p2,p3)

_Deref_ret1_impl_(p1)
_Deref_ret2_impl_(p1,p2)
_Deref_ret3_impl_(p1,p2,p3)

_Deref2_pre1_impl_(p1)
_Deref2_post1_impl_(p1)
_Deref2_ret1_impl_(p1)

_$SPECSTRIZE( x )
_Check_return_impl_

_Success_impl_(expr)

_Printf_format_string_impl_
_Scanf_format_string_impl_
_Scanf_s_format_string_impl_

_In_bound_impl_
_Out_bound_impl_
_Ret_bound_impl_
_Deref_in_bound_impl_
_Deref_out_bound_impl_
_Deref_ret_bound_impl_

_In_range_impl_(min,max)
_Out_range_impl_(min,max)
_Ret_range_impl_(min,max)
_Deref_in_range_impl_(min,max)
_Deref_out_range_impl_(min,max)
_Deref_ret_range_impl_(min,max)

_$valid
_$maybevalid
_$notvalid

_$null
_$maybenull
_$notnull

_$zterm
_$maybezterm
_$notzterm

_$readaccess
_$writeaccess

_$cap(size)         
_$cap_c(size)     
_$cap_for(param)
_$cap_x(size)

_$bytecap(size)
_$bytecap_c(size)
_$bytecap_x(size)

_$mult(mult,size)

_$count(size)
_$count_c(size)
_$count_x(size)

_$bytecount(size)
_$bytecount_c(size)
_$bytecount_x(size)

_$pre
_$post
_$deref_pre
_$deref_post

_$bound
_$range(min,max)

_Pre1_impl_(p1)               
_Pre2_impl_(p1,p2)            
_Pre3_impl_(p1,p2,p3)         

_Post1_impl_(p1)              
_Post2_impl_(p1,p2)           
_Post3_impl_(p1,p2,p3)        

_Ret1_impl_(p1)               
_Ret2_impl_(p1,p2)            
_Ret3_impl_(p1,p2,p3)         

_Deref_pre1_impl_(p1)         
_Deref_pre2_impl_(p1,p2)      
_Deref_pre3_impl_(p1,p2,p3)   

_Deref_post1_impl_(p1)        
_Deref_post2_impl_(p1,p2)     
_Deref_post3_impl_(p1,p2,p3)  

_Deref_ret1_impl_(p1)         
_Deref_ret2_impl_(p1,p2)      
_Deref_ret3_impl_(p1,p2,p3)   

_Deref2_pre1_impl_(p1)        
_Deref2_post1_impl_(p1)       
_Deref2_ret1_impl_(p1)        





