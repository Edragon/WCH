C51 COMPILER V7.06   SCSI                                                                  04/13/2009 14:27:03 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE SCSI
OBJECT MODULE PLACED IN SCSI.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE SCSI.c BROWSE DEBUG OBJECTEXTEND TABS(1)

stmt level    source

   1          /******************************************************************
   2             本程序只供学习使用，未经作者许可，不得用于其它任何用途
   3          
   4                  欢迎访问我的USB专区：http://group.ednchina.com/93/
   5                  欢迎访问我的blog：   http://www.ednchina.com/blog/computer00
   6                                       http://computer00.21ic.org
   7          
   8                  感谢PCB赞助商――电子园： http://bbs.cepark.com/
   9          
  10          SCSI.c file
  11          
  12          作者：电脑圈圈
  13          建立日期: 2008.08.15
  14          修改日期: 2008.08.20
  15          版本：V1.1
  16          版权所有，盗版必究。
  17          Copyright(C) 电脑圈圈 2008-2018
  18          All rights reserved            
  19          *******************************************************************/
  20          
  21          
  22          #include "MyType.H"
  23          #include "UsbCore.h"
  24          #include "PDIUSBD12.h"
  25          #include "SCSI.h"
  26          #include "Uart.h"
  27          #include "config.h"
  28          #include "ide.h"
  29          
  30          //定义端点2最大包长度为64字节
  31          #define EP2_SIZE 64
  32          
  33          //处理端点2数据的缓冲区
  34          idata uint8 Ep2Buffer[EP2_SIZE];
  35          
  36          uint32 ByteOffset;  //字节偏移量
  37          uint32 CurrentLba;  //当前LBA地址
  38          
  39          //INQUIRY命令需要返回的数据
  40          //请对照书中INQUIRY命令响应数据格式
  41          code uint8 DiskInf[36]=
  42          {
  43           0x00, //磁盘设备
  44           0x00, //其中最高位D7为RMB。RMB=0，表示不可移除设备。如果RMB=1，则为可移除设备。
  45           0x00, //各种版本号0
  46           0x01, //数据响应格式
  47           0x1F, //附加数据长度，为31字节
  48           0x00, //保留
  49           0x00, //保留
  50           0x00, //保留
  51           0xB5,0xE7,0xC4,0xD4,0xC8,0xA6,0xC8,0xA6, //厂商标识，为字符串“电脑圈圈”
  52           
  53           //产品标识，为字符串“做的USB转IDE”
  54           0xD7,0xF6,0xB5,0xC4,0x55,0x53,0x42,0xD7,0xAA,0x49,0x44,0x45,0x00,0x00,0x00,0x00,
  55           0x31,0x2E,0x30,0x31 //产品版本号，为1.01
C51 COMPILER V7.06   SCSI                                                                  04/13/2009 14:27:03 PAGE 2   

  56          };
  57          
  58          //READ_FORMAT_CAPACITIES命令需要返回的数据
  59          //请对照书中READ_FORMAT_CAPACITIES命令响应数据格式
  60          code uint8 MaximumCapacity[12]=
  61          {
  62           0x00, 0x00, 0x00, //保留
  63           0x08,  //容量列表长度
  64           0x14, 0x00, 0x00, 0x00,  //块数(最大支持160G)
  65           0x03, //描述符代码为3，表示最大支持的格式化容量
  66           0x00, 0x02, 0x00 //每块大小为512字节
  67          };
  68          
  69          //READ_CAPACITY命令需要返回的数据
  70          uint8 DiskCapacity[8]=
  71          {
  72           0x00,0x00,0x00,0x00, //能够访问的最大逻辑块地址
  73           0x00,0x00,0x02,0x00  //块的长度
  74           //磁盘的容量使用IDE_IDENTIFY_DRIVE命令获取
  75          };
  76          
  77          //REQUEST SENSE命令需要返回的数据，这里固定为无效命令
  78          //请参看书总数据结构的解释
  79          code uint8 SenseData[18]=
  80          {
  81           0x70, //错误代码，固定为0x70
  82           0x00, //保留
  83           0x05, //Sense Key为0x05，表示无效请求（ILLEGAL REQUEST）
  84           0x00, 0x00, 0x00, 0x00, //Information为0
  85           0x0A, //附加数据长度为10字节
  86           0x00, 0x00, 0x00, 0x00, //保留
  87           0x20, //Additional Sense Code(ASC)为0x20，表示无效命令操作码（INVALID COMMAND OPERATION CODE）
  88           0x00, //Additional Sense Code Qualifier(ASCQ)为0
  89           0x00, 0x00, 0x00, 0x00 //保留
  90          };
  91          
  92          uint8 * pEp2SendData;
  93          uint32 Ep2DataLength;
  94          
  95          /********************************************************************
  96          函数功能：从CBW中获取传输数据的字节数。
  97          入口参数：无。
  98          返    回：需要传输的字节数。
  99          备    注：无。
 100          ********************************************************************/
 101          uint32 GetDataTransferLength(void)
 102          {
 103   1       uint32 Len;
 104   1       
 105   1       //CBW[8]~CBW[11]为传输长度（小端结构）
 106   1       
 107   1       Len=CBW[11];
 108   1       Len=Len*256+CBW[10];
 109   1       Len=Len*256+CBW[9];
 110   1       Len=Len*256+CBW[8];
 111   1       
 112   1       return Len;
 113   1      }
 114          ////////////////////////End of function//////////////////////////////
 115          
 116          /********************************************************************
 117          函数功能：从CBW中获取逻辑块地址LBA的字节数。
C51 COMPILER V7.06   SCSI                                                                  04/13/2009 14:27:03 PAGE 3   

 118          入口参数：无。
 119          返    回：逻辑块地址LBA。
 120          备    注：无。
 121          ********************************************************************/
 122          uint32 GetLba(void)
 123          {
 124   1       uint32 Lba;
 125   1       
 126   1       //读和写命令时，CBW[17]~CBW[20]为逻辑块地址（大端结构）
 127   1       
 128   1       Lba=CBW[17];
 129   1       Lba=Lba*256+CBW[18];
 130   1       Lba=Lba*256+CBW[19];
 131   1       Lba=Lba*256+CBW[20];
 132   1       
 133   1       return Lba;
 134   1      }
 135          ////////////////////////End of function//////////////////////////////
 136          
 137          /********************************************************************
 138          函数功能：填充CSW。
 139          入口参数：Residue：剩余字节数；Status：命令执行的状态。
 140          返    回：无。
 141          备    注：无。
 142          ********************************************************************/
 143          void SetCsw(uint32 Residue, uint8 Status)
 144          {
 145   1       //设置CSW的签名，其实可以不用每次都设置的，
 146   1       //开始初始化设置一次就行了，这里每次都设置
 147   1       CSW[0]='U';
 148   1       CSW[1]='S';
 149   1       CSW[2]='B';
 150   1       CSW[3]='S';
 151   1       
 152   1       //复制dCBWTag到CSW的dCSWTag中去
 153   1       CSW[4]=CBW[4];
 154   1       CSW[5]=CBW[5];
 155   1       CSW[6]=CBW[6];
 156   1       CSW[7]=CBW[7];
 157   1          
 158   1       //剩余字节数
 159   1       CSW[8]=Residue&0xFF;
 160   1       CSW[9]=(Residue>>8)&0xFF;
 161   1       CSW[10]=(Residue>>16)&0xFF;
 162   1       CSW[11]=(Residue>>24)&0xFF;
 163   1       
 164   1       //命令执行的状态，0表示成功，1表示失败。
 165   1       CSW[12]=Status;
 166   1      }
 167          ////////////////////////End of function//////////////////////////////
 168          
 169          /********************************************************************
 170          函数功能：获取磁盘数据函数。
 171          入口参数：无。
 172          返    回：无。
 173          备    注：无。
 174          ********************************************************************/
 175          void GetDiskData(void)
 176          {
 177   1       uint8 i;
 178   1       //如果字节偏移量为512的整数倍，说明需要读取新的扇区
 179   1       if((ByteOffset&0x1FF)==0)
C51 COMPILER V7.06   SCSI                                                                  04/13/2009 14:27:03 PAGE 4   

 180   1       {
 181   2        IdeWriteSectorCount(1); //设置读取一扇区
 182   2        IdeWriteLba(CurrentLba); //设置读取的扇区地址
 183   2        CurrentLba++;            //当前扇区地址加1
 184   2        IdeWriteCommand(IDE_Read_Sectors); //发送读扇区的命令
 185   2        IdeSetAddress(IDE_DATA); //设置为数据地址
 186   2        IDE_DATA_H=0xFF; //数据口设置为输入
 187   2        IDE_DATA_L=0xFF;   
 188   2       }
 189   1       for(i=0;i<EP2_SIZE;i++) //读取EP2_SIZE字节数据
 190   1       {
 191   2        while(!IDE_IORDY); //等待IO忙
 192   2        IdeClrDior(); //DIOR置低
 193   2        Ep2Buffer[i]=IDE_DATA_L; //读数据
 194   2        i++;
 195   2        Ep2Buffer[i]=IDE_DATA_H;
 196   2        IdeSetDior(); //DIOR置高
 197   2       }
 198   1       ByteOffset+=EP2_SIZE; //调整字节字节偏移量，每次发送最大包长度的数据
 199   1       pEp2SendData=Ep2Buffer; //发送数据的地址
 200   1      }
 201          ////////////////////////End of function//////////////////////////////
 202          
 203          /********************************************************************
 204          函数功能：将数据通过端点2发送。
 205          入口参数：无。
 206          返    回：无。
 207          备    注：当发送数据长度为0，并且处于数据阶段时，将自动发送CSW。
 208          ********************************************************************/
 209          void Ep2SendData(void)
 210          {
 211   1       if(Ep2DataLength==0) //如果需要发送的数据长度为0
 212   1       {
 213   2        if(TransportStage==DATA_STAGE) //并且处于数据阶段
 214   2        {
 215   3         //则直接进入状态阶段
 216   3         TransportStage=STATUS_STAGE;
 217   3         Ep2DataLength=sizeof(CSW); //数据长度为CSW的大小
 218   3         pEp2SendData=CSW; //返回的数据为CSW
 219   3        }
 220   2        else
 221   2        {
 222   3         return; //如果是状态阶段的数据发送完毕，则返回
 223   3        }
 224   2       }
 225   1       
 226   1      #ifdef DEBUG0
               if(TransportStage==STATUS_STAGE)
               {
                Prints("状态阶段。\r\n");
               }
              #endif
 232   1      
 233   1       //如果要发送的长度比端点2最大包长要多，则分多个包发送
 234   1       if(Ep2DataLength>EP2_SIZE)
 235   1       {
 236   2        //发送端点2最大长度字节
 237   2        D12WriteEndpointBuffer(5,EP2_SIZE,pEp2SendData);
 238   2        //指针移动EP2_SIZE字节
 239   2        pEp2SendData+=EP2_SIZE;
 240   2        Ep2DataLength-=EP2_SIZE;
 241   2        //如果是READ(10)命令，并且是数据阶段，则需要获取磁盘数据
C51 COMPILER V7.06   SCSI                                                                  04/13/2009 14:27:03 PAGE 5   

 242   2        if((CBW[15]==READ_10)&&(TransportStage==DATA_STAGE))
 243   2        {
 244   3         GetDiskData(); //获取磁盘数据
 245   3        }
 246   2       }
 247   1       else
 248   1       {
 249   2        //可以全部发送完
 250   2        D12WriteEndpointBuffer(5,(uint8)Ep2DataLength,pEp2SendData);
 251   2        Ep2DataLength=0;  //传输长度为0
 252   2        IdeSetAddress(IDE_BUS_NOT_USE); //设置IDE总线为空闲状态
 253   2        //如果是数据发送完毕，则进入仅批量传输协议的状态阶段
 254   2        if(TransportStage==DATA_STAGE)
 255   2        {
 256   3         TransportStage=STATUS_STAGE;
 257   3         Ep2DataLength=sizeof(CSW); //数据长度为CSW的大小
 258   3         pEp2SendData=CSW; //返回的数据为CSW
 259   3        }
 260   2        else if(TransportStage==STATUS_STAGE) //如果是状态阶段完毕，则进入到命令阶段
 261   2        {
 262   3         TransportStage=COMMAND_STAGE;  //进入到命令阶段
 263   3        }
 264   2       }
 265   1      }
 266          ////////////////////////End of function//////////////////////////////
 267          
 268          /********************************************************************
 269          函数功能：处理SCSI命令的函数。
 270          入口参数：无。
 271          返    回：无。
 272          备    注：虽然叫SCSI命令，但是实际使用的是UFI命令。
 273          ********************************************************************/
 274          void ProcScsiCommand(void)
 275          {
 276   1       TransportStage=DATA_STAGE; //进入到数据阶段
 277   1       
 278   1       //CBW中偏移量为15的字段为命令的类型
 279   1       switch(CBW[15])
 280   1       {
 281   2        case INQUIRY:  //INQUIRY命令
 282   2        #ifdef DEBUG0
                 Prints("查询命令。返回数据：\r\n");
                #endif
 285   2         pEp2SendData=DiskInf; //返回磁盘信息
 286   2         Ep2DataLength=GetDataTransferLength(); //获取需要返回的长度
 287   2         SetCsw(Ep2DataLength-sizeof(DiskInf),0); //设置剩余字节数以及状态成功
 288   2         if(Ep2DataLength>sizeof(DiskInf)) //如果请求的数据比实际的要长
 289   2         {
 290   3          Ep2DataLength=sizeof(DiskInf); //则只返回实际的长度
 291   3         }
 292   2         Ep2SendData(); //返回数据
 293   2        break;
 294   2        
 295   2        case READ_FORMAT_CAPACITIES: //读格式化容量
 296   2        #ifdef DEBUG0
                 Prints("读格式化容量命令。返回数据：\r\n");
                #endif
 299   2         pEp2SendData=MaximumCapacity; //返回最大格式化容量信息
 300   2         Ep2DataLength=GetDataTransferLength(); //获取需要返回的长度
 301   2         SetCsw(Ep2DataLength-sizeof(MaximumCapacity),0); //设置剩余字节数以及状态成功
 302   2         if(Ep2DataLength>sizeof(MaximumCapacity)) //如果请求的数据比实际的要长
 303   2         {
C51 COMPILER V7.06   SCSI                                                                  04/13/2009 14:27:03 PAGE 6   

 304   3          Ep2DataLength=sizeof(MaximumCapacity); //则只返回实际的长度
 305   3         }
 306   2         Ep2SendData(); //返回数据
 307   2        break;
 308   2        
 309   2        case READ_CAPACITY: //读容量命令
 310   2        #ifdef DEBUG0
                 Prints("读容量命令。返回数据：\r\n");
                #endif
 313   2         pEp2SendData=DiskCapacity; //返回磁盘容量
 314   2         Ep2DataLength=GetDataTransferLength(); //获取需要返回的长度
 315   2         SetCsw(Ep2DataLength-sizeof(DiskCapacity),0); //设置剩余字节数以及状态成功
 316   2         if(Ep2DataLength>sizeof(DiskCapacity)) //如果请求的数据比实际的要长
 317   2         {
 318   3          Ep2DataLength=sizeof(DiskCapacity); //则只返回实际的长度
 319   3         }
 320   2         Ep2SendData(); //返回数据
 321   2        break;
 322   2        
 323   2        case READ_10: //READ(10)命令
 324   2        #ifdef DEBUG0
                 Prints("READ(10)命令。返回数据：\r\n");
                #endif
 327   2         Ep2DataLength=GetDataTransferLength(); //获取需要返回的长度
 328   2         CurrentLba=GetLba(); //获取当前的LBA
 329   2         ByteOffset=0;  //偏移量为0
 330   2         SetCsw(0,0);   //设置剩余字节数为0，状态成功
 331   2         GetDiskData(); //获取需要返回的数据
 332   2         Ep2SendData(); //返回数据
 333   2        break;
 334   2        
 335   2        case WRITE_10: //WRITE(10)命令
 336   2        #ifdef DEBUG0
                 Prints("WRITE(10)命令。输出数据：\r\n");
                #endif
 339   2         Ep2DataLength=GetDataTransferLength(); //获取需要返回的长度
 340   2         CurrentLba=GetLba(); //获取当前的LBA
 341   2         ByteOffset=0; //偏移量为0
 342   2         SetCsw(0,0); //设置剩余字节数为0，状态成功
 343   2        break;
 344   2        
 345   2        case REQUEST_SENSE: //该命令询问前一个命令执行失败的原因
 346   2        #ifdef DEBUG0
                 Prints("REQUEST SENSE命令。返回SENSE数据（无效命令）：\r\n");
                #endif
 349   2         pEp2SendData=SenseData; //返回探测数据
 350   2         Ep2DataLength=GetDataTransferLength(); //获取需要返回的长度
 351   2         SetCsw(Ep2DataLength-sizeof(SenseData),0); //设置剩余字节数以及状态成功
 352   2         if(Ep2DataLength>sizeof(SenseData)) //如果请求的数据比实际的要长
 353   2         {
 354   3          Ep2DataLength=sizeof(SenseData); //则只返回实际的长度
 355   3         }
 356   2         Ep2SendData(); //返回数据
 357   2        break;
 358   2        
 359   2        case TEST_UNIT_READY: //测试磁盘是否准备好
 360   2         Ep2DataLength=0; //设置长度为0，发送数据将返回CSW
 361   2         SetCsw(0,0); //设置CSW为成功
 362   2         Ep2SendData(); //返回CSW
 363   2        break;
 364   2        
 365   2        default: //其它命令不认，返回执行失败
C51 COMPILER V7.06   SCSI                                                                  04/13/2009 14:27:03 PAGE 7   

 366   2         if(CBW[12]&0x80) Ep2DataLength=1; //如果为输入请求，则随便返回1字节
 367   2         else Ep2DataLength=0; //否则为输出请求，则设置长度为0，直接返回CSW
 368   2         SetCsw(GetDataTransferLength()-Ep2DataLength,1); //设置CSW为失败
 369   2         Ep2SendData(); //返回CSW
 370   2        break;
 371   2       }
 372   1      }
 373          ////////////////////////End of function//////////////////////////////
 374          
 375          /********************************************************************
 376          函数功能：处理输出数据。
 377          入口参数：无。
 378          返    回：无。
 379          备    注：无。
 380          ********************************************************************/
 381          void ProcScsiOutData(void)
 382          {
 383   1       uint8 Len;
 384   1       uint8 i;
 385   1       
 386   1       //读端点2数据
 387   1       Len=D12ReadEndpointBuffer(4,EP2_SIZE,Ep2Buffer);
 388   1       Ep2DataLength-=Len;
 389   1       //清除端点缓冲区
 390   1       D12ClearBuffer();
 391   1       //如果字节偏移量为512的整数倍，说明需要开始写新的扇区
 392   1       if((ByteOffset&0x1FF)==0)
 393   1       {
 394   2        IdeWaitBusy(); //等待命令完成
 395   2        IdeWriteLba(CurrentLba); //设置写扇区的地址
 396   2        IdeWriteSectorCount(1);  //设置写一扇区
 397   2        CurrentLba++;            //当前扇区地址加1
 398   2        IdeWriteCommand(IDE_Write_Sectors); //发送写扇区命令
 399   2        IdeSetAddress(IDE_DATA); //设置为数据地址  
 400   2       }
 401   1       ByteOffset+=Len; //偏移量调整
 402   1       
 403   1       for(i=0;i<Len;i++) //将读到的数据写入硬盘
 404   1       {
 405   2        while(!IDE_IORDY); //等待IO忙
 406   2        IdeClrDiow(); //DIOW置低
 407   2        IDE_DATA_L=Ep2Buffer[i]; //写数据
 408   2        i++;
 409   2        IDE_DATA_H=Ep2Buffer[i];
 410   2        IdeSetDiow(); //DIOW置高
 411   2        //由于学习板上IO口未接上拉电阻，仅使用内部上拉电阻，
 412   2        //所以驱动能力较弱，高电平的建立时间较长，所以需要
 413   2        //事先设置高电平状态
 414   2        IDE_DATA_L=0xFF;
 415   2        IDE_DATA_H=0xFF;
 416   2       }
 417   1       
 418   1       //数据传输完毕，进入到状态阶段
 419   1       if(Ep2DataLength==0)
 420   1       {
 421   2        IdeWaitBusy(); //等待命令完成
 422   2        IdeSetAddress(IDE_BUS_NOT_USE); //设置IDE总线为空闲状态 
 423   2        //此时Ep2DataLength为0，并且处于数据阶段，调用发送数据函数将返回CSW
 424   2        Ep2SendData();
 425   2       }
 426   1      }
 427          ////////////////////////End of function//////////////////////////////
C51 COMPILER V7.06   SCSI                                                                  04/13/2009 14:27:03 PAGE 8   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1440    ----
   CONSTANT SIZE    =     66    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      14
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
