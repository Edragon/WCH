C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE USBCORE
OBJECT MODULE PLACED IN UsbCore.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE UsbCore.c BROWSE DEBUG OBJECTEXTEND TABS(1)

stmt level    source

   1          /******************************************************************
   2             本程序只供学习使用，未经作者许可，不得用于其它任何用途
   3             
   4                  欢迎访问我的USB专区：http://group.ednchina.com/93/
   5                  欢迎访问我的blog：   http://www.ednchina.com/blog/computer00
   6                                       http://computer00.21ic.org
   7          
   8                  感谢PCB赞助商――电子园： http://bbs.cepark.com/
   9          
  10          UsbCore.c file
  11          
  12          作者：电脑圈圈
  13          建立日期: 2008.06.29
  14          修改日期: 2008.08.21
  15          版本：V1.1
  16          版权所有，盗版必究。
  17          Copyright(C) 电脑圈圈 2008-2018
  18          All rights reserved            
  19          *******************************************************************/
  20          
  21          #include "config.h"
  22          #include "pdiusbd12.h"
  23          #include "uart.h"
  24          #include "usbcore.h"
  25          #include "led.h"
  26          #include "SCSI.h"
  27          
  28          
  29          idata uint8 Buffer[16];  //读端点0用的缓冲区
  30          
  31          idata uint8 CBW[31];  //保存CBW用的缓冲区
  32          idata uint8 CSW[13];  //保存CSW用的缓冲区
  33          
  34          //USB设备请求的各字段
  35          uint8  bmRequestType;
  36          uint8  bRequest;
  37          uint16 wValue;
  38          uint16 wIndex;
  39          uint16 wLength;
  40          //当前发送数据的位置
  41          uint8 * pSendData;
  42          //需要发送数据的长度
  43          uint16 SendLength;
  44          //是否需要发送0数据包的标志。在USB控制传输的数据过程中，
  45          //当返回的数据包字节数少于最大包长时，会认为数据过程结束。
  46          //当请求的字节数比实际需要返回的字节数长，而实际返回的字节
  47          //数又刚好是端点0大小的整数倍时，就需要返回一个0长度的数据包
  48          //来结束数据过程。因此这里增加一个标志，供程序决定是否需要返回
  49          //一个0长度的数据包。
  50          uint8 NeedZeroPacket;
  51          
  52          //当前的配置值。只有在设置非0配置后
  53          uint8 ConfigValue;
  54          
  55          //端点1缓冲是否忙的标志。当缓冲区中有数据时，该标志为真。
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 2   

  56          //当缓冲区中空闲时，该标志为假。
  57          uint8 Ep1InIsBusy;
  58          uint8 Ep2InIsBusy;
  59          
  60          //定义最大逻辑单元。本实例仅有一个逻辑单元，所以值为0。
  61          //由于在对后面的命令处理中，忽略了逻辑单元字段，如果你
  62          //将这里的0改成1，将会有两个逻辑单元，从而显示两块参数
  63          //完全一样的磁盘。改成n，就会显示n+1块参数完全一样的磁盘。
  64          //最多可以有16个逻辑单元（n=15）。
  65          code uint8 MaxLun[1]={0};
  66          
  67          //传输的阶段，有命令(COMMAND_STAGE)、数据(DATA_STAGE)、状态(STATUS_STAGE)三个。
  68          uint8 TransportStage;
  69          
  70          //USB设备描述符的定义
  71          code uint8 DeviceDescriptor[0x12]=  //设备描述符为18字节
  72          {
  73          //bLength字段。设备描述符的长度为18(0x12)字节
  74           0x12,
  75           
  76          //bDescriptorType字段。设备描述符的编号为0x01
  77           0x01,
  78           
  79          //bcdUSB字段。这里设置版本为USB1.1，即0x0110。
  80          //由于是小端结构，所以低字节在先，即0x10，0x01。
  81           0x10,
  82           0x01,
  83           
  84          //bDeviceClass字段。我们不在设备描述符中定义设备类，
  85          //而在接口描述符中定义设备类，所以该字段的值为0。
  86           0x00,
  87           
  88          //bDeviceSubClass字段。bDeviceClass字段为0时，该字段也为0。
  89           0x00,
  90           
  91          //bDeviceProtocol字段。bDeviceClass字段为0时，该字段也为0。
  92           0x00,
  93           
  94          //bMaxPacketSize0字段。PDIUSBD12的端点0大小的16字节。
  95           0x10,
  96           
  97          //idVender字段。厂商ID号，我们这里取0x8888，仅供实验用。
  98          //实际产品不能随便使用厂商ID号，必须跟USB协会申请厂商ID号。
  99          //注意小端模式，低字节在先。
 100           0x88,
 101           0x88,
 102           
 103          //idProduct字段。产品ID号，由于是第十个实验，我们这里取0x000A。
 104          //注意小端模式，低字节应该在前。
 105           0x0A,
 106           0x00,
 107           
 108          //bcdDevice字段。我们这个USB键盘刚开始做，就叫它1.0版吧，即0x0100。
 109          //小端模式，低字节在先。
 110           0x00,
 111           0x01,
 112           
 113          //iManufacturer字段。厂商字符串的索引值，为了方便记忆和管理，
 114          //字符串索引就从1开始吧。
 115           0x01,
 116          
 117          //iProduct字段。产品字符串的索引值。刚刚用了1，这里就取2吧。
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 3   

 118          //注意字符串索引值不要使用相同的值。
 119           0x02,
 120           
 121          //iSerialNumber字段。设备的序列号字符串索引值。
 122          //这里取3就可以了。
 123           0x03,
 124          
 125          //bNumConfigurations字段。该设备所具有的配置数。
 126          //我们只需要一种配置就行了，因此该值设置为1。
 127           0x01
 128          };
 129          //////////////////////////设备描述符完毕//////////////////////////////
 130          
 131          //USB配置描述符集合的定义
 132          //配置描述符总长度为9+9+7+7字节
 133          code uint8 ConfigurationDescriptor[9+9+7+7]=
 134          {
 135           /***************配置描述符***********************/
 136           //bLength字段。配置描述符的长度为9字节。
 137           0x09,
 138           
 139           //bDescriptorType字段。配置描述符编号为0x02。
 140           0x02,
 141           
 142           //wTotalLength字段。配置描述符集合的总长度，
 143           //包括配置描述符本身、接口描述符、类描述符、端点描述符等。
 144           sizeof(ConfigurationDescriptor)&0xFF, //低字节
 145           (sizeof(ConfigurationDescriptor)>>8)&0xFF, //高字节
 146           
 147           //bNumInterfaces字段。该配置包含的接口数，有1个接口。
 148           0x01,
 149           
 150           //bConfiguration字段。该配置的值为1。
 151           0x01,
 152           
 153           //iConfigurationz字段，该配置的字符串索引。这里没有，为0。
 154           0x00,
 155           
 156           //bmAttributes字段，该设备的属性。由于我们的板子是总线供电的，
 157           //并且我们不想实现远程唤醒的功能，所以该字段的值为0x80。
 158           0x80,
 159           
 160           //bMaxPower字段，该设备需要的最大电流量。由于我们的板子
 161           //需要的电流不到100mA，因此我们这里设置为100mA。由于每单位
 162           //电流为2mA，所以这里设置为50(0x32)。
 163           0x32,
 164           
 165           /*****************接口描述符*******************/
 166           //bLength字段。接口描述符的长度为9字节。
 167           0x09,
 168           
 169           //bDescriptorType字段。接口描述符的编号为0x04。
 170           0x04,
 171           
 172           //bInterfaceNumber字段。该接口的编号，第一个接口，编号为0。
 173           0x00,
 174           
 175           //bAlternateSetting字段。该接口的备用编号，为0。
 176           0x00,
 177           
 178           //bNumEndpoints字段。非0端点的数目。该接口有2个批量端点
 179           0x02,
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 4   

 180           
 181           //bInterfaceClass字段。该接口所使用的类。大容量存储设备接口类的代码为0x08。
 182           0x08,
 183           
 184           //bInterfaceSubClass字段。该接口所使用的子类。SCSI透明命令集的子类代码为0x06。
 185           0x06,
 186           
 187           //bInterfaceProtocol字段。协议为仅批量传输，代码为0x50。
 188           0x50,
 189           
 190           //iConfiguration字段。该接口的字符串索引值。这里没有，为0。
 191           0x00,
 192            
 193           /*************标准批量数据输入端点描述符****************/
 194           //bLength字段。端点描述符长度为7字节。
 195           0x07,
 196           
 197           //bDescriptorType字段。端点描述符编号为0x05。
 198           0x05,
 199           
 200           //bEndpointAddress字段。端点的地址。我们使用D12的输入端点2。
 201           //D7位表示数据方向，输入端点D7为1。所以输入端点2的地址为0x82。
 202           0x82,
 203           
 204           //bmAttributes字段。D1~D0为端点传输类型选择。
 205           //该端点为批端点。批量端点的编号为2。其它位保留为0。
 206           0x02,
 207           
 208           //wMaxPacketSize字段。该端点的最大包长。端点2的最大包长为64字节。
 209           //注意低字节在先。
 210           0x40,
 211           0x00,
 212           
 213           //bInterval字段。端点查询的时间，此处无意义。
 214           0x00,
 215           
 216           /*************标准批量数据输出端点描述符****************/
 217           //bLength字段。端点描述符长度为7字节。
 218           0x07,
 219           
 220           //bDescriptorType字段。端点描述符编号为0x05。
 221           0x05,
 222           
 223           //bEndpointAddress字段。端点的地址。我们使用D12的输出端点2。
 224           //D7位表示数据方向，输出端点D7为0。所以输出端点2的地址为0x02。
 225           0x02,
 226           
 227           //bmAttributes字段。D1~D0为端点传输类型选择。
 228           //该端点为批端点。批量端点的编号为2。其它位保留为0。
 229           0x02,
 230           
 231           //wMaxPacketSize字段。该端点的最大包长。端点2的最大包长为64字节。
 232           //注意低字节在先。
 233           0x40,
 234           0x00,
 235           
 236           //bInterval字段。端点查询的时间，此处无意义。
 237           0x00
 238          };
 239          ////////////////////////配置描述符集合完毕//////////////////////////
 240          
 241          /************************语言ID的定义********************/
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 5   

 242          code uint8 LanguageId[4]=
 243          {
 244           0x04, //本描述符的长度
 245           0x03, //字符串描述符
 246           //0x0409为美式英语的ID
 247           0x09,
 248           0x04
 249          };
 250          ////////////////////////语言ID完毕//////////////////////////////////
 251          
 252          /**************************************************/
 253          /*********        本转换结果来自         **********/
 254          /********* Http://computer00.21ic.org    **********/
 255          /*********        作者: 电脑圈圈         **********/
 256          /*********         欢迎大家使用          **********/
 257          /*********    版权所有，盗版请写明出处   **********/
 258          /**************************************************/
 259          
 260          //http://computer00.21ic.org/user1/2198/archives/2007/42769.html
 261          //字符串“电脑圈圈的USB专区 Http://group.ednchina.com/93/”的Unicode编码
 262          //8位小端格式
 263          code uint8 ManufacturerStringDescriptor[82]={
 264          82,         //该描述符的长度为82字节
 265          0x03,       //字符串描述符的类型编码为0x03
 266          0x35, 0x75, //电
 267          0x11, 0x81, //脑
 268          0x08, 0x57, //圈
 269          0x08, 0x57, //圈
 270          0x84, 0x76, //的
 271          0x55, 0x00, //U
 272          0x53, 0x00, //S
 273          0x42, 0x00, //B
 274          0x13, 0x4e, //专
 275          0x3a, 0x53, //区
 276          0x20, 0x00, // 
 277          0x48, 0x00, //H
 278          0x74, 0x00, //t
 279          0x74, 0x00, //t
 280          0x70, 0x00, //p
 281          0x3a, 0x00, //:
 282          0x2f, 0x00, ///
 283          0x2f, 0x00, ///
 284          0x67, 0x00, //g
 285          0x72, 0x00, //r
 286          0x6f, 0x00, //o
 287          0x75, 0x00, //u
 288          0x70, 0x00, //p
 289          0x2e, 0x00, //.
 290          0x65, 0x00, //e
 291          0x64, 0x00, //d
 292          0x6e, 0x00, //n
 293          0x63, 0x00, //c
 294          0x68, 0x00, //h
 295          0x69, 0x00, //i
 296          0x6e, 0x00, //n
 297          0x61, 0x00, //a
 298          0x2e, 0x00, //.
 299          0x63, 0x00, //c
 300          0x6f, 0x00, //o
 301          0x6d, 0x00, //m
 302          0x2f, 0x00, ///
 303          0x39, 0x00, //9
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 6   

 304          0x33, 0x00, //3
 305          0x2f, 0x00  ///
 306          };
 307          /////////////////////////厂商字符串结束/////////////////////////////
 308          
 309          //字符串“《圈圈教你玩USB》之 USB转IDE”的Unicode编码
 310          //8位小端格式
 311          code uint8 ProductStringDescriptor[40]={
 312          40,         //该描述符的长度为40字节
 313          0x03,       //字符串描述符的类型编码为0x03
 314          0x0a, 0x30, //《
 315          0x08, 0x57, //圈
 316          0x08, 0x57, //圈
 317          0x59, 0x65, //教
 318          0x60, 0x4f, //你
 319          0xa9, 0x73, //玩
 320          0x55, 0x00, //U
 321          0x53, 0x00, //S
 322          0x42, 0x00, //B
 323          0x0b, 0x30, //》
 324          0x4b, 0x4e, //之
 325          0x20, 0x00, // 
 326          0x55, 0x00, //U
 327          0x53, 0x00, //S
 328          0x42, 0x00, //B
 329          0x6c, 0x8f, //转
 330          0x49, 0x00, //I
 331          0x44, 0x00, //D
 332          0x45, 0x00  //E
 333          };
 334          ////////////////////////产品字符串结束////////////////////////////
 335          
 336          //字符串“2008-08-21”的Unicode编码
 337          //8位小端格式
 338          code uint8 SerialNumberStringDescriptor[22]={
 339          22,         //该描述符的长度为22字节
 340          0x03,       //字符串描述符的类型编码为0x03
 341          0x32, 0x00, //2
 342          0x30, 0x00, //0
 343          0x30, 0x00, //0
 344          0x38, 0x00, //8
 345          0x2d, 0x00, //-
 346          0x30, 0x00, //0
 347          0x38, 0x00, //8
 348          0x2d, 0x00, //-
 349          0x32, 0x00, //2
 350          0x31, 0x00  //1
 351          };
 352          //////////////////////产品序列号字符串结束/////////////////////////
 353          
 354          /********************************************************************
 355          函数功能：延时x毫秒函数。
 356          入口参数：x：延时的毫秒数。
 357          返    回：无。
 358          备    注：无。
 359          ********************************************************************/
 360          void DelayXms(uint16 x)                
 361          {
 362   1       uint16 i;
 363   1       uint16 j;
 364   1       for(i=0;i<x;i++)
 365   1       for(j=0;j<227;j++); //循环语句延时
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 7   

 366   1      }
 367          ////////////////////////End of function//////////////////////////////
 368          
 369          /********************************************************************
 370          函数功能：USB断开连接函数。
 371          入口参数：无。
 372          返    回：无。
 373          备    注：无。
 374          ********************************************************************/
 375          void UsbDisconnect(void)
 376          {
 377   1      #ifdef DEBUG0
               Prints("断开USB连接。\r\n");
              #endif
 380   1       D12WriteCommand(D12_SET_MODE);  //写设置模式命令
 381   1       D12WriteByte(0x06); //设置模式的第一字节
 382   1       D12WriteByte(0x47); //设置模式的第二字节
 383   1       DelayXms(1000);  //延迟1秒
 384   1      }
 385          ////////////////////////End of function//////////////////////////////
 386          
 387          /********************************************************************
 388          函数功能：USB连接函数。
 389          入口参数：无。
 390          返    回：无。
 391          备    注：无。
 392          ********************************************************************/
 393          void UsbConnect(void)
 394          {
 395   1      #ifdef DEBUG0
               Prints("连接USB。\r\n");
              #endif
 398   1       D12WriteCommand(D12_SET_MODE);  //写设置模式命令
 399   1       D12WriteByte(0x16); //设置模式的第一字节
 400   1       D12WriteByte(0x47); //设置模式的第二字节
 401   1      }
 402          ////////////////////////End of function//////////////////////////////
 403          
 404          /********************************************************************
 405          函数功能：总线挂起中断处理函数。
 406          入口参数：无。
 407          返    回：无。
 408          备    注：无。
 409          ********************************************************************/
 410          void UsbBusSuspend(void)
 411          {
 412   1      #ifdef DEBUG0
               Prints("USB总线挂起。\r\n");
              #endif
 415   1      }
 416          ////////////////////////End of function//////////////////////////////
 417          
 418          /********************************************************************
 419          函数功能：总线复位中断处理函数。
 420          入口参数：无。
 421          返    回：无。
 422          备    注：无。
 423          ********************************************************************/
 424          void UsbBusReset(void)
 425          {
 426   1      #ifdef DEBUG0
               Prints("USB总线复位。\r\n");
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 8   

              #endif
 429   1       Ep1InIsBusy=0; //复位后端点1输入缓冲区空闲。
 430   1       Ep2InIsBusy=0; //复位后端点2输入缓冲区空闲。
 431   1       TransportStage=COMMAND_STAGE; //复位后传输阶段为命令阶段。
 432   1      }
 433          ////////////////////////End of function//////////////////////////////
 434          
 435          /********************************************************************
 436          函数功能：根据pData和SendLength将数据发送到端点0的函数。
 437          入口参数：无。
 438          返    回：无。
 439          备    注：无。
 440          ********************************************************************/
 441          void UsbEp0SendData(void)
 442          {
 443   1       //将数据写到端点中去准备发送
 444   1       //写之前要先判断一下需要发送的数据是否比端点0
 445   1       //最大长度大，如果超过端点大小，则一次只能发送
 446   1       //最大包长的数据。端点0的最大包长在DeviceDescriptor[7]
 447   1       if(SendLength>DeviceDescriptor[7])
 448   1       {
 449   2        //按最大包长度发送
 450   2        D12WriteEndpointBuffer(1,DeviceDescriptor[7],pSendData);
 451   2        //发送后剩余字节数减少最大包长
 452   2        SendLength-=DeviceDescriptor[7];
 453   2        //发送一次后指针位置要调整
 454   2        pSendData+= DeviceDescriptor[7];
 455   2       }
 456   1       else
 457   1       {
 458   2        if(SendLength!=0)
 459   2        {
 460   3         //不够最大包长，可以直接发送
 461   3         D12WriteEndpointBuffer(1,SendLength,pSendData);
 462   3         //发送完毕后，SendLength长度变为0
 463   3         SendLength=0;
 464   3        }
 465   2        else //如果要发送的数据包长度为0
 466   2        {
 467   3         if(NeedZeroPacket==1) //如果需要发送0长度数据
 468   3         {
 469   4          D12WriteEndpointBuffer(1,0,pSendData); //发送0长度数据包
 470   4          NeedZeroPacket=0; //清需要发送0长度数据包标志
 471   4         }
 472   3        }
 473   2       }
 474   1      }
 475          ////////////////////////End of function//////////////////////////////
 476          
 477          /********************************************************************
 478          函数功能：端点0输出中断处理函数。
 479          入口参数：无。
 480          返    回：无。
 481          备    注：无。
 482          ********************************************************************/
 483          void UsbEp0Out(void)
 484          {
 485   1      #ifdef DEBUG0
               Prints("USB端点0输出中断。\r\n");
              #endif
 488   1       //读取端点0输出最后传输状态，该操作清除中断标志
 489   1       //并判断第5位是否为1，如果是，则说明是建立包
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 9   

 490   1       if(D12ReadEndpointLastStatus(0)&0x20)
 491   1       {
 492   2        D12ReadEndpointBuffer(0,16,Buffer); //读建立过程数据
 493   2        D12AcknowledgeSetup(); //应答建立包
 494   2        D12ClearBuffer(); //清缓冲区
 495   2        //将缓冲数据填到设备请求的各字段中
 496   2        bmRequestType=Buffer[0];
 497   2        bRequest=Buffer[1];
 498   2        wValue=Buffer[2]+(((uint16)Buffer[3])<<8);
 499   2        wIndex=Buffer[4]+(((uint16)Buffer[5])<<8);
 500   2        wLength=Buffer[6]+(((uint16)Buffer[7])<<8);
 501   2        //下面的代码判断具体的请求，并根据不同的请求进行相关操作
 502   2        //如果D7位为1，则说明是输入请求
 503   2        if((bmRequestType&0x80)==0x80)
 504   2        {
 505   3         //根据bmRequestType的D6~5位散转，D6~5位表示请求的类型
 506   3         //0为标准请求，1为类请求，2为厂商请求。
 507   3         switch((bmRequestType>>5)&0x03)
 508   3         {
 509   4          case 0:  //标准请求
 510   4           #ifdef DEBUG0
                    Prints("USB标准输入请求：");
                   #endif
 513   4           //USB协议定义了几个标准输入请求，我们实现这些标准请求即可
 514   4           //请求的代码在bRequest中，对不同的请求代码进行散转
 515   4           //事实上，我们还需要对接收者进行散转，因为不同的请求接收者
 516   4           //是不一样的。接收者在bmRequestType的D4~D0位中定义。
 517   4           //我们这里为了简化操作，有些就省略了对接收者的判断。
 518   4           //例如获取描述符的请求，只根据描述符的类型来区别。
 519   4           switch(bRequest)
 520   4           {
 521   5            case GET_CONFIGURATION: //获取配置
 522   5             #ifdef DEBUG0
                      Prints("获取配置。\r\n");
                     #endif
 525   5            break;
 526   5            
 527   5            case GET_DESCRIPTOR:  //获取描述符
 528   5             #ifdef DEBUG0
                      Prints("获取描述符――");
                     #endif
 531   5             //对描述符类型进行散转，对于全速设备，
 532   5             //标准请求只支持发送到设备的设备、配置、字符串三种描述符
 533   5             switch((wValue>>8)&0xFF)
 534   5              {
 535   6               case DEVICE_DESCRIPTOR: //设备描述符
 536   6                #ifdef DEBUG0
                         Prints("设备描述符。\r\n");
                        #endif
 539   6                pSendData=DeviceDescriptor;  //需要发送的数据
 540   6                //判断请求的字节数是否比实际需要发送的字节数多
 541   6                //这里请求的是设备描述符，因此数据长度就是
 542   6                //DeviceDescriptor[0]。如果请求的比实际的长，
 543   6                //那么只返回实际长度的数据
 544   6                if(wLength>DeviceDescriptor[0])
 545   6                {
 546   7                 SendLength=DeviceDescriptor[0];
 547   7                 if(SendLength%DeviceDescriptor[7]==0) //并且刚好是整数个数据包时
 548   7                 {
 549   8                  NeedZeroPacket=1; //需要返回0长度的数据包
 550   8                 }
 551   7                }
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 10  

 552   6                else
 553   6                {
 554   7                 SendLength=wLength;
 555   7                }
 556   6                //将数据通过EP0返回
 557   6                UsbEp0SendData();
 558   6               break;
 559   6               
 560   6               case CONFIGURATION_DESCRIPTOR:  //配置描述符
 561   6                #ifdef DEBUG0
                         Prints("配置描述符。\r\n");
                        #endif
 564   6                pSendData=ConfigurationDescriptor; //需要发送的数据为配置描述符
 565   6                //判断请求的字节数是否比实际需要发送的字节数多
 566   6                //这里请求的是配置描述符集合，因此数据长度就是
 567   6                //ConfigurationDescriptor[3]*256+ConfigurationDescriptor[2]。
 568   6                //如果请求的比实际的长，那么只返回实际长度的数据
 569   6                SendLength=ConfigurationDescriptor[3];
 570   6                SendLength=SendLength*256+ConfigurationDescriptor[2];
 571   6                if(wLength>SendLength)
 572   6                {
 573   7                 if(SendLength%DeviceDescriptor[7]==0) //并且刚好是整数个数据包时
 574   7                 {
 575   8                  NeedZeroPacket=1; //需要返回0长度的数据包
 576   8                 }
 577   7                }
 578   6                else
 579   6                {
 580   7                 SendLength=wLength;
 581   7                }
 582   6                //将数据通过EP0返回
 583   6                UsbEp0SendData();
 584   6               break;
 585   6               
 586   6               case STRING_DESCRIPTOR:  //字符串描述符
 587   6                #ifdef DEBUG0
                         Prints("字符串描述符");
                        #endif
 590   6                switch(wValue&0xFF)  //根据wValue的低字节（索引值）散转
 591   6                {
 592   7                 case 0:  //获取语言ID
 593   7                  #ifdef DEBUG0
                           Prints("(语言ID)。\r\n");
                          #endif
 596   7                  pSendData=LanguageId;
 597   7                  SendLength=LanguageId[0];
 598   7                 break;
 599   7                 
 600   7                 case 1:  //厂商字符串的索引值为1，所以这里为厂商字符串
 601   7                 #ifdef DEBUG0
                           Prints("(厂商描述)。\r\n");
                          #endif
 604   7                  pSendData=ManufacturerStringDescriptor;
 605   7                  SendLength=ManufacturerStringDescriptor[0];
 606   7                 break;
 607   7                 
 608   7                 case 2:  //产品字符串的索引值为2，所以这里为产品字符串
 609   7                 #ifdef DEBUG0
                           Prints("(产品描述)。\r\n");
                          #endif
 612   7                  pSendData=ProductStringDescriptor;
 613   7                  SendLength=ProductStringDescriptor[0];
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 11  

 614   7                 break;
 615   7                 
 616   7                 case 3:  //产品序列号的索引值为3，所以这里为序列号
 617   7                 #ifdef DEBUG0
                           Prints("(产品序列号)。\r\n");
                          #endif
 620   7                  pSendData=SerialNumberStringDescriptor;
 621   7                  SendLength=SerialNumberStringDescriptor[0];
 622   7                 break;
 623   7                 
 624   7                 default :
 625   7                  #ifdef DEBUG0
                           Prints("(未知的索引值)。\r\n");
                          #endif
 628   7                  //对于未知索引值的请求，返回一个0长度的包
 629   7                  SendLength=0;
 630   7                  NeedZeroPacket=1;
 631   7                 break;
 632   7                }
 633   6                //判断请求的字节数是否比实际需要发送的字节数多
 634   6                //如果请求的比实际的长，那么只返回实际长度的数据
 635   6                if(wLength>SendLength)
 636   6                {
 637   7                 if(SendLength%DeviceDescriptor[7]==0) //并且刚好是整数个数据包时
 638   7                 {
 639   8                  NeedZeroPacket=1; //需要返回0长度的数据包
 640   8                 }
 641   7                }
 642   6                else
 643   6                {
 644   7                 SendLength=wLength;
 645   7                }
 646   6                //将数据通过EP0返回
 647   6                UsbEp0SendData();         
 648   6               break;
 649   6      
 650   6               case REPORT_DESCRIPTOR:  //报告描述符
 651   6                #ifdef DEBUG0
                         Prints("报告描述符。\r\n");
                        #endif
 654   6               break;
 655   6                       
 656   6               default:  //其它描述符
 657   6                #ifdef DEBUG0
                         Prints("其他描述符，描述符代码：");
                         PrintHex((wValue>>8)&0xFF);
                         Prints("\r\n");
                        #endif
 662   6               break;
 663   6              }
 664   5             break;
 665   5            
 666   5            case GET_INTERFACE: //获取接口
 667   5             #ifdef DEBUG0
                      Prints("获取接口。\r\n");
                     #endif
 670   5            break;
 671   5            
 672   5            case GET_STATUS: //获取状态
 673   5             #ifdef DEBUG0
                      Prints("获取状态。\r\n");
                     #endif
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 12  

 676   5            break;
 677   5            
 678   5            case SYNCH_FRAME: //同步帧
 679   5             #ifdef DEBUG0
                      Prints("同步帧。\r\n");
                     #endif
 682   5            break;
 683   5            
 684   5            default:  //未定义的标准请求
 685   5             #ifdef DEBUG0
                      Prints("错误：未定义的标准输入请求。\r\n");
                     #endif       
 688   5            break;
 689   5           }
 690   4          break;
 691   4          
 692   4          case 1:  //类请求
 693   4           #ifdef DEBUG0
                    Prints("USB类输入请求：");
                   #endif
 696   4           switch(bRequest)
 697   4           {
 698   5            case GET_MAX_LUN: //请求为GET_MAX_LUN(0xFE)
 699   5             #ifdef DEBUG0
                      Prints("获取最大逻辑单元。\r\n");
                     #endif
 702   5             
 703   5             pSendData=MaxLun; //要返回的数据位置
 704   5             SendLength=1;     //长度为1字节
 705   5             //如果请求的长度比实际长度短，则仅返回请求长度
 706   5             if(wLength<SendLength) 
 707   5             {
 708   6              SendLength=wLength;
 709   6             }
 710   5             //将数据通过EP0返回
 711   5             UsbEp0SendData();
 712   5            break;
 713   5            
 714   5            default:
 715   5             #ifdef DEBUG0
                      Prints("未知请求。\r\n");
                     #endif
 718   5            break;
 719   5           }
 720   4          break;
 721   4          
 722   4          case 2:  //厂商请求
 723   4           #ifdef DEBUG0
                    Prints("USB厂商输入请求：\r\n");
                   #endif
 726   4          break;
 727   4          
 728   4          default: //未定义的请求。这里只显示一个报错信息。
 729   4           #ifdef DEBUG0
                    Prints("错误：未定义的输入请求。\r\n");
                   #endif
 732   4          break;
 733   4         }
 734   3        }
 735   2        //否则说明是输出请求
 736   2        else //if(bmRequestType&0x80==0x80)之else
 737   2        {
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 13  

 738   3         //根据bmRequestType的D6~5位散转，D6~5位表示请求的类型
 739   3         //0为标准请求，1为类请求，2为厂商请求。
 740   3         switch((bmRequestType>>5)&0x03)
 741   3         {
 742   4          case 0:  //标准请求
 743   4           #ifdef DEBUG0
                    Prints("USB标准输出请求：");
                   #endif
 746   4           //USB协议定义了几个标准输出请求，我们实现这些标准请求即可
 747   4           //请求的代码在bRequest中，对不同的请求代码进行散转
 748   4           switch(bRequest)
 749   4           {
 750   5            case CLEAR_FEATURE: //清除特性
 751   5             #ifdef DEBUG0
                      Prints("清除特性。\r\n");
                     #endif
 754   5            break;
 755   5            
 756   5            case SET_ADDRESS:  //设置地址
 757   5             #ifdef DEBUG0
                      Prints("设置地址。地址为：");
                      PrintHex(wValue&0xFF); //显示所设置的地址
                      Prints("\r\n");
                     #endif
 762   5             D12SetAddress(wValue&0xFF); //wValue中的低字节是设置的地址值
 763   5             //设置地址没有数据过程，直接进入到状态过程，返回一个0长度的数据包
 764   5             SendLength=0;
 765   5             NeedZeroPacket=1;
 766   5             //将数据通过EP0返回
 767   5             UsbEp0SendData();
 768   5            break;
 769   5            
 770   5            case SET_CONFIGURATION: //设置配置
 771   5             #ifdef DEBUG0
                      Prints("设置配置。\r\n");
                     #endif
 774   5             //使能非0端点。非0端点只有在设置为非0的配置后才能使能。
 775   5             //wValue的低字节为配置的值，如果该值为非0，才能使能非0端点。
 776   5             //保存当前配置值
 777   5             ConfigValue=wValue&0xFF;
 778   5             D12SetEndpointEnable(ConfigValue);
 779   5             //返回一个0长度的状态数据包
 780   5             SendLength=0;
 781   5             NeedZeroPacket=1;
 782   5             //将数据通过EP0返回
 783   5             UsbEp0SendData();
 784   5            break;
 785   5            
 786   5            case SET_DESCRIPTOR: //设置描述符
 787   5             #ifdef DEBUG0
                      Prints("设置描述符。\r\n");
                     #endif
 790   5            break;
 791   5            
 792   5            case SET_FEATURE: //设置特性
 793   5             #ifdef DEBUG0
                      Prints("设置特性。\r\n");
                     #endif
 796   5            break;
 797   5      
 798   5            case SET_INTERFACE: //设置接口
 799   5             #ifdef DEBUG0
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 14  

                      Prints("设置接口。\r\n");
                     #endif
 802   5             //返回一个0长度的状态数据包
 803   5             SendLength=0;
 804   5             NeedZeroPacket=1;
 805   5             //将数据通过EP0返回
 806   5             UsbEp0SendData();
 807   5            break;
 808   5            
 809   5            default:  //未定义的标准请求
 810   5             #ifdef DEBUG0
                      Prints("错误：未定义的标准输出请求。\r\n");
                     #endif       
 813   5            break;
 814   5           }
 815   4          break;
 816   4          
 817   4          case 1:  //类请求
 818   4           #ifdef DEBUG0
                    Prints("USB类输出请求：");
                   #endif
 821   4           switch(bRequest)
 822   4           {
 823   5            case MASS_STORAGE_RESET:
 824   5             #ifdef DEBUG0
                      Prints("大容量存储设备复位。\r\n");
                     #endif
 827   5             
 828   5             //接下来的数据为命令阶段(CBW)
 829   5             TransportStage=COMMAND_STAGE;
 830   5             //返回一个0长度的数据包
 831   5             SendLength=0;
 832   5             NeedZeroPacket=1;
 833   5             //将数据通过EP0返回
 834   5             UsbEp0SendData();
 835   5            break;
 836   5            
 837   5            default:
 838   5             #ifdef DEBUG0
                      Prints("未知请求。\r\n");
                     #endif
 841   5            break;
 842   5           }
 843   4          break;
 844   4          
 845   4          case 2:  //厂商请求
 846   4           #ifdef DEBUG0
                    Prints("USB厂商输出请求：\r\n");
                   #endif
 849   4          break;
 850   4          
 851   4          default: //未定义的请求。这里只显示一个报错信息。
 852   4           #ifdef DEBUG0
                    Prints("错误：未定义的输出请求。\r\n");
                   #endif
 855   4          break;
 856   4         }
 857   3        }
 858   2       }
 859   1       //普通数据输出
 860   1       else //if(D12ReadEndpointLastStatus(0)&0x20)之else
 861   1       {
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 15  

 862   2        D12ReadEndpointBuffer(0,16,Buffer);
 863   2        D12ClearBuffer();
 864   2       }
 865   1      }
 866          ////////////////////////End of function//////////////////////////////
 867          
 868          /********************************************************************
 869          函数功能：端点0输入中断处理函数。
 870          入口参数：无。
 871          返    回：无。
 872          备    注：无。
 873          ********************************************************************/
 874          void UsbEp0In(void)
 875          {
 876   1      #ifdef DEBUG0
               Prints("USB端点0输入中断。\r\n");
              #endif
 879   1       //读最后发送状态，这将清除端点0的中断标志位
 880   1       D12ReadEndpointLastStatus(1);
 881   1       //发送剩余的字节数
 882   1       UsbEp0SendData();
 883   1      }
 884          ////////////////////////End of function//////////////////////////////
 885          
 886          /********************************************************************
 887          函数功能：端点1输出中断处理函数。
 888          入口参数：无。
 889          返    回：无。
 890          备    注：无。
 891          ********************************************************************/
 892          void UsbEp1Out(void)
 893          {
 894   1      #ifdef DEBUG0
               Prints("USB端点1输出中断。\r\n");
              #endif
 897   1       //读端点最后状态，这将清除端点1输出的中断标志位
 898   1       D12ReadEndpointLastStatus(2);
 899   1       //清除端点缓冲区
 900   1       D12ClearBuffer();
 901   1      }
 902          ////////////////////////End of function//////////////////////////////
 903          
 904          /********************************************************************
 905          函数功能：端点1输入中断处理函数。
 906          入口参数：无。
 907          返    回：无。
 908          备    注：无。
 909          ********************************************************************/
 910          void UsbEp1In(void)
 911          {
 912   1      #ifdef DEBUG0
               Prints("USB端点1输入中断。\r\n");
              #endif
 915   1       //读最后发送状态，这将清除端点1输入的中断标志位
 916   1       D12ReadEndpointLastStatus(3);
 917   1       //端点1输入处于空闲状态
 918   1       Ep1InIsBusy=0;
 919   1      }
 920          ////////////////////////End of function//////////////////////////////
 921          
 922          /********************************************************************
 923          函数功能：端点2输出中断处理函数。
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 16  

 924          入口参数：无。
 925          返    回：无。
 926          备    注：无。
 927          ********************************************************************/
 928          void UsbEp2Out(void)
 929          {
 930   1       uint8 Len;
 931   1       
 932   1      #ifdef DEBUG0
               Prints("USB端点2输出中断。\r\n");
              #endif
 935   1      /* 旧版代码，有BUG。修改在函数返回时清除中断
 936   1       //当双缓冲没有全满时，可以清除中断标志
 937   1       if((D12ReadEndpointStatus(4)&0x60)!=0x60)
 938   1       {
 939   1        //读最后发送状态，这将清除端点2输入的中断标志位
 940   1        D12ReadEndpointLastStatus(4);
 941   1       }
 942   1      */
 943   1       if(TransportStage==COMMAND_STAGE)
 944   1       {
 945   2        //将数据读回到CBW缓冲区中
 946   2        Len=D12ReadEndpointBuffer(4,sizeof(CBW),CBW);
 947   2        //清除端点缓冲区
 948   2        D12ClearBuffer();
 949   2        if(Len==31) //如果接收到的数据长度是31字节，则说明是CBW
 950   2        {
 951   3         //检查CBW的签名是否正确，签名为“USBC”
 952   3         if((CBW[0]=='U')&&(CBW[1]=='S')&&(CBW[2]=='B')&&(CBW[3]=='C'))
 953   3         {
 954   4          //CBW签名正确，处理SCSI命令
 955   4          ProcScsiCommand();
 956   4         }
 957   3        }
 958   2       }
 959   1       else if(TransportStage==DATA_STAGE)
 960   1       {
 961   2        ProcScsiOutData(); //处理SCSI输出数据
 962   2       }
 963   1       else
 964   1       {
 965   2        D12ReadEndpointBuffer(4,0,0);
 966   2        D12ClearBuffer();
 967   2       }
 968   1       //当两个缓冲区中都没有数据时，才能清除中断标志
 969   1       if(!(D12ReadEndpointStatus(4)&0x60))
 970   1       {
 971   2        //读最后发送状态，这将清除端点2输入的中断标志位
 972   2        D12ReadEndpointLastStatus(4);
 973   2       }
 974   1      }
 975          ////////////////////////End of function//////////////////////////////
 976          
 977          /********************************************************************
 978          函数功能：端点2输入中断处理函数。
 979          入口参数：无。
 980          返    回：无。
 981          备    注：无。
 982          ********************************************************************/
 983          void UsbEp2In(void)
 984          {
 985   1      #ifdef DEBUG0
C51 COMPILER V7.06   USBCORE                                                               04/13/2009 14:23:06 PAGE 17  

               Prints("USB端点2输入中断。\r\n");
              #endif
 988   1       //读最后发送状态，这将清除端点2输入的中断标志位
 989   1       D12ReadEndpointLastStatus(5);
 990   1       Ep2SendData();  //发送数据
 991   1       //如果双缓冲区没有都满，还可以再写
 992   1       if((D12ReadEndpointStatus(5)&0x06)!=0x06)
 993   1       {
 994   2        Ep2SendData(); //再发一次数据，利用双缓冲
 995   2       }
 996   1      }
 997          ////////////////////////End of function//////////////////////////////


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    889    ----
   CONSTANT SIZE    =    199    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18       1
   IDATA SIZE       =     60    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
