C51 COMPILER V7.06   MAIN                                                                  04/13/2009 14:23:39 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE Main.c BROWSE DEBUG OBJECTEXTEND TABS(1)

stmt level    source

   1          /******************************************************************
   2             本程序只供学习使用，未经作者许可，不得用于其它任何用途
   3             
   4                  欢迎访问我的USB专区：http://group.ednchina.com/93/
   5                  欢迎访问我的blog：   http://www.ednchina.com/blog/computer00
   6                                       http://computer00.21ic.org
   7          
   8                  感谢PCB赞助商――电子园： http://bbs.cepark.com/
   9          
  10          main.c file
  11          
  12          作者：电脑圈圈
  13          建立日期: 2008.06.27
  14          修改日期: 2008.08.08
  15          版本：V1.1
  16          版权所有，盗版必究。
  17          Copyright(C) 电脑圈圈 2008-2018
  18          All rights reserved            
  19          *******************************************************************/
  20          
  21          #include <AT89X52.H>  //头文件
  22          #include "Key.h"
  23          #include "Led.h"
  24          #include "UART.h"
  25          #include "pdiusbd12.h"
  26          #include "UsbCore.h"
  27          #include "config.h"
  28          
  29          #ifdef DEBUG0
              code uint8 HeadTable[][74]={
              "********************************************************************\r\n",
              "******        《圈圈教你玩USB》之 USB MIDI 键盘               ******\r\n",
              "******                      AT89S52 CPU                       ******\r\n",
              "******                  建立日期：",__DATE__,"                 ******\r\n",
              "******                   建立时间：",__TIME__,"                   ******\r\n",
              "******                    作者：电脑圈圈                      ******\r\n",
              "******                    欢迎访问作者的                      ******\r\n",
              "******           USB专区：http://group.ednchina.com/93/       ******\r\n",
              "******      BLOG1：http://www.ednchina.com/blog/computer00    ******\r\n",
              "******                BLOG2：http://computer00.21ic.org       ******\r\n",
              "******                  请按K1-K8分别进行测试                 ******\r\n",
              "********************************************************************\r\n",
              };
              #endif
  45          /********************************************************************
  46          函数功能：根据按键情况返回Note On消息的函数。
  47          入口参数：无。
  48          返    回：无。
  49          备    注：无。
  50          ********************************************************************/
  51          void SendNoteOnMsg(void)
  52          {
  53   1       //4字节的缓冲区
  54   1       uint8 Buf[4];
  55   1       
C51 COMPILER V7.06   MAIN                                                                  04/13/2009 14:23:39 PAGE 2   

  56   1       //Note On消息第一字节固定为0x09，第二字节为0x9n（n为通道号）
  57   1       //第三字节为0xKK（K为音高），第四字节为0xVV（V为力度）。
  58   1       
  59   1       Buf[0]=0x09; //Note On消息的包头
  60   1       Buf[1]=0x90; //在通道0上发送Note On消息
  61   1       Buf[3]=0x7F; //音量设置为最大
  62   1       
  63   1       if(KeyDown&KEY1)
  64   1       {
  65   2        Buf[2]=55;  //C调的5（绝对音高为G音）
  66   2        //通过端点2返回4字节MIDI事件包。
  67   2        D12WriteEndpointBuffer(5,4,Buf);
  68   2        Ep2InIsBusy=1;  //设置端点忙标志。
  69   2        KeyDown&=~KEY1; //清除对应的按键
  70   2        return;  //发送一个音符后就返回
  71   2       }
  72   1      
  73   1       if(KeyDown&KEY2)
  74   1       {
  75   2        Buf[2]=57;  //C调的6（绝对音高为A音）
  76   2        //通过端点2返回4字节MIDI事件包。
  77   2        D12WriteEndpointBuffer(5,4,Buf);
  78   2        Ep2InIsBusy=1;  //设置端点忙标志。
  79   2        KeyDown&=~KEY2; //清除对应的按键
  80   2        return;  //发送一个音符后就返回
  81   2       }
  82   1       
  83   1       if(KeyDown&KEY3)
  84   1       {
  85   2        Buf[2]=60;  //C调的1（绝对音高为C音，即中央C）
  86   2        //通过端点2返回4字节MIDI事件包。
  87   2        D12WriteEndpointBuffer(5,4,Buf);
  88   2        Ep2InIsBusy=1;  //设置端点忙标志。
  89   2        KeyDown&=~KEY3; //清除对应的按键
  90   2        return;  //发送一个音符后就返回
  91   2       }
  92   1       
  93   1       if(KeyDown&KEY4)
  94   1       {
  95   2        Buf[2]=62;  //C调的2（绝对音高为D音）
  96   2        //通过端点2返回4字节MIDI事件包。
  97   2        D12WriteEndpointBuffer(5,4,Buf);
  98   2        Ep2InIsBusy=1;  //设置端点忙标志。
  99   2        KeyDown&=~KEY4; //清除对应的按键
 100   2        return;  //发送一个音符后就返回
 101   2       }
 102   1       
 103   1       if(KeyDown&KEY5)
 104   1       {
 105   2        Buf[2]=64;  //C调的3（绝对音高为E音）
 106   2        //通过端点2返回4字节MIDI事件包。
 107   2        D12WriteEndpointBuffer(5,4,Buf);
 108   2        Ep2InIsBusy=1;  //设置端点忙标志。
 109   2        KeyDown&=~KEY5; //清除对应的按键
 110   2        return;  //发送一个音符后就返回
 111   2       }
 112   1       
 113   1       if(KeyDown&KEY6)
 114   1       {
 115   2        Buf[2]=67;  //C调的5（绝对音高为G音）
 116   2        //通过端点2返回4字节MIDI事件包。
 117   2        D12WriteEndpointBuffer(5,4,Buf);
C51 COMPILER V7.06   MAIN                                                                  04/13/2009 14:23:39 PAGE 3   

 118   2        Ep2InIsBusy=1;  //设置端点忙标志。
 119   2        KeyDown&=~KEY6; //清除对应的按键
 120   2        return;  //发送一个音符后就返回
 121   2       }
 122   1       
 123   1       if(KeyDown&KEY7)
 124   1       {
 125   2        Buf[2]=69;  //C调的6（绝对音高为A音）
 126   2        //通过端点2返回4字节MIDI事件包。
 127   2        D12WriteEndpointBuffer(5,4,Buf);
 128   2        Ep2InIsBusy=1;  //设置端点忙标志。
 129   2        KeyDown&=~KEY7; //清除对应的按键
 130   2        return;  //发送一个音符后就返回
 131   2       }
 132   1       
 133   1       if(KeyDown&KEY8)
 134   1       {
 135   2        Buf[2]=72;  //C调的1（绝对音高为C音）
 136   2        //通过端点2返回4字节MIDI事件包。
 137   2        D12WriteEndpointBuffer(5,4,Buf);
 138   2        Ep2InIsBusy=1;  //设置端点忙标志。
 139   2        KeyDown&=~KEY8; //清除对应的按键
 140   2        return;  //发送一个音符后就返回
 141   2       }
 142   1       
 143   1       //如果有按键弹起，则关闭对应的音
 144   1       Buf[3]=0x00;  //音量设置为0
 145   1       
 146   1       if(KeyUp&KEY1)
 147   1       {
 148   2        Buf[2]=55;  //C调的5（绝对音高为G音）
 149   2        //通过端点2返回4字节MIDI事件包。
 150   2        D12WriteEndpointBuffer(5,4,Buf);
 151   2        Ep2InIsBusy=1;  //设置端点忙标志。
 152   2        KeyUp&=~KEY1; //清除对应的按键
 153   2        return;  //发送一个音符后就返回
 154   2       }
 155   1      
 156   1       if(KeyUp&KEY2)
 157   1       {
 158   2        Buf[2]=57;  //C调的6（绝对音高为A音）
 159   2        //通过端点2返回4字节MIDI事件包。
 160   2        D12WriteEndpointBuffer(5,4,Buf);
 161   2        Ep2InIsBusy=1;  //设置端点忙标志。
 162   2        KeyUp&=~KEY2; //清除对应的按键
 163   2        return;  //发送一个音符后就返回
 164   2       }
 165   1       
 166   1       if(KeyUp&KEY3)
 167   1       {
 168   2        Buf[2]=60;  //C调的1（绝对音高为C音，即中央C）
 169   2        //通过端点2返回4字节MIDI事件包。
 170   2        D12WriteEndpointBuffer(5,4,Buf);
 171   2        Ep2InIsBusy=1;  //设置端点忙标志。
 172   2        KeyUp&=~KEY3; //清除对应的按键
 173   2        return;  //发送一个音符后就返回
 174   2       }
 175   1       
 176   1       if(KeyUp&KEY4)
 177   1       {
 178   2        Buf[2]=62;  //C调的2（绝对音高为D音）
 179   2        //通过端点2返回4字节MIDI事件包。
C51 COMPILER V7.06   MAIN                                                                  04/13/2009 14:23:39 PAGE 4   

 180   2        D12WriteEndpointBuffer(5,4,Buf);
 181   2        Ep2InIsBusy=1;  //设置端点忙标志。
 182   2        KeyUp&=~KEY4; //清除对应的按键
 183   2        return;  //发送一个音符后就返回
 184   2       }
 185   1       
 186   1       if(KeyUp&KEY5)
 187   1       {
 188   2        Buf[2]=64;  //C调的3（绝对音高为E音）
 189   2        //通过端点2返回4字节MIDI事件包。
 190   2        D12WriteEndpointBuffer(5,4,Buf);
 191   2        Ep2InIsBusy=1;  //设置端点忙标志。
 192   2        KeyUp&=~KEY5; //清除对应的按键
 193   2        return;  //发送一个音符后就返回
 194   2       }
 195   1       
 196   1       if(KeyUp&KEY6)
 197   1       {
 198   2        Buf[2]=67;  //C调的5（绝对音高为G音）
 199   2        //通过端点2返回4字节MIDI事件包。
 200   2        D12WriteEndpointBuffer(5,4,Buf);
 201   2        Ep2InIsBusy=1;  //设置端点忙标志。
 202   2        KeyUp&=~KEY6; //清除对应的按键
 203   2        return;  //发送一个音符后就返回
 204   2       }
 205   1       
 206   1       if(KeyUp&KEY7)
 207   1       {
 208   2        Buf[2]=69;  //C调的6（绝对音高为A音）
 209   2        //通过端点2返回4字节MIDI事件包。
 210   2        D12WriteEndpointBuffer(5,4,Buf);
 211   2        Ep2InIsBusy=1;  //设置端点忙标志。
 212   2        KeyUp&=~KEY7; //清除对应的按键
 213   2        return;  //发送一个音符后就返回
 214   2       }
 215   1       
 216   1       if(KeyUp&KEY8)
 217   1       {
 218   2        Buf[2]=72;  //C调的1（绝对音高为C音）
 219   2        //通过端点2返回4字节MIDI事件包。
 220   2        D12WriteEndpointBuffer(5,4,Buf);
 221   2        Ep2InIsBusy=1;  //设置端点忙标志。
 222   2        KeyUp&=~KEY8; //清除对应的按键
 223   2        return;  //发送一个音符后就返回
 224   2       }
 225   1      }
 226          ////////////////////////End of function//////////////////////////////
 227          
 228          void PlaySong(void);
 229          
 230          /********************************************************************
 231          函数功能：主函数。
 232          入口参数：无。
 233          返    回：无。
 234          备    注：无。
 235          ********************************************************************/
 236          void main(void)  //主函数
 237          {
 238   1      #ifdef DEBUG0
               uint8 i;
              #endif
 241   1      
C51 COMPILER V7.06   MAIN                                                                  04/13/2009 14:23:39 PAGE 5   

 242   1       uint16 id;
 243   1       uint8 InterruptSource;
 244   1       
 245   1       EA=1; //打开中断
 246   1       InitKeyboard(); //初始化按键
 247   1       InitUART();  //初始化串口
 248   1      
 249   1       id=D12ReadID();
 250   1       
 251   1      #ifdef DEBUG0
               for(i=0;i<16;i++)   //显示信息
               {
                Prints(HeadTable[i]);
               }
              
               Prints("Your D12 chip\'s ID is: ");
               PrintShortIntHex(id);
              
               if(id==0x1012)
               {
                Prints(". ID is correct! Congratulations!\r\n\r\n");
               }
               else
               {
                Prints(". ID is incorrect! What a pity!\r\n\r\n");
               }
              #endif 
 269   1      
 270   1       UsbDisconnect();  //先断开USB连接
 271   1       UsbConnect();  //将USB连接上
 272   1       ConfigValue=0; //配置值初始化为0
 273   1       
 274   1       while(1)  //死循环
 275   1       {
 276   2        if(D12GetIntPin()==0) //如果有中断发生
 277   2        {
 278   3         D12WriteCommand(READ_INTERRUPT_REGISTER);  //写读中断寄存器的命令
 279   3         InterruptSource=D12ReadByte(); //读回第一字节的中断寄存器
 280   3         if(InterruptSource&0x80)UsbBusSuspend(); //总线挂起中断处理
 281   3         if(InterruptSource&0x40)UsbBusReset();   //总线复位中断处理
 282   3         if(InterruptSource&0x01)UsbEp0Out();     //端点0输出中断处理
 283   3         if(InterruptSource&0x02)UsbEp0In();      //端点0输入中断处理
 284   3         if(InterruptSource&0x04)UsbEp1Out();     //端点1输出中断处理
 285   3         if(InterruptSource&0x08)UsbEp1In();      //端点1输入中断处理
 286   3         if(InterruptSource&0x10)UsbEp2Out();     //端点2输出中断处理
 287   3         if(InterruptSource&0x20)UsbEp2In();      //端点2输入中断处理
 288   3        }
 289   2        if(ConfigValue!=0) //如果已经设置为非0的配置，则可以返回数据
 290   2        {
 291   3         if(Ep2InIsBusy==0)  //如果端点2输入没有处于忙状态，则可以发送数据
 292   3         {
 293   4          KeyCanChange=0;  //禁止按键扫描
 294   4          //如果KEY1和KEY8同时按住，则自动播放歌曲
 295   4          if(KeyPress==(KEY1|KEY8))
 296   4          {
 297   5           KeyCanChange=1; //允许按键扫描
 298   5           PlaySong(); //播放歌曲
 299   5          }
 300   4          if(KeyUp||KeyDown) //如果有按键事件发生
 301   4          {
 302   5           SendNoteOnMsg();  //则返回MIDI Note On消息
 303   5          }
C51 COMPILER V7.06   MAIN                                                                  04/13/2009 14:23:39 PAGE 6   

 304   4          KeyCanChange=1;  //允许按键扫描
 305   4         }
 306   3        }
 307   2       }
 308   1      }
 309          ////////////////////////End of function//////////////////////////////


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    649    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
