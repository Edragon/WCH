C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE USBCORE
OBJECT MODULE PLACED IN UsbCore.OBJ
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE UsbCore.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /******************************************************************
   2             本程序只供学习使用，未经作者许可，不得用于其它任何用途
   3                                  
   4                  欢迎访问我的USB专区：http://group.ednchina.com/93/
   5                  欢迎访问我的blog：   http://www.ednchina.com/blog/computer00
   6                                       http://computer00.21ic.org
   7          
   8                  感谢PCB赞助商――电子园： http://bbs.cepark.com/
   9          
  10          UsbCore.c file
  11          
  12          作者：电脑圈圈
  13          建立日期: 2008.06.29
  14          修改日期: 2008.08.22
  15          版本：V1.1
  16          版权所有，盗版必究。
  17          Copyright(C) 电脑圈圈 2008-2018
  18          All rights reserved            
  19          *******************************************************************/
  20          
  21          #include "config.h"
  22          #include "pdiusbd12.h"
  23          #include "uart.h"
  24          #include "usbcore.h"
  25          #include "led.h"
  26          
  27          idata uint8 Buffer[16];  //读端点0用的缓冲区
  28          
  29          //USB设备请求的各字段
  30          uint8  bmRequestType;
  31          uint8  bRequest;
  32          uint16 wValue;
  33          uint16 wIndex;
  34          uint16 wLength;
  35          //当前发送数据的位置
  36          uint8 * pSendData;
  37          //需要发送数据的长度
  38          uint16 SendLength;
  39          //是否需要发送0数据包的标志。在USB控制传输的数据过程中，
  40          //当返回的数据包字节数少于最大包长时，会认为数据过程结束。
  41          //当请求的字节数比实际需要返回的字节数长，而实际返回的字节
  42          //数又刚好是端点0大小的整数倍时，就需要返回一个0长度的数据包
  43          //来结束数据过程。因此这里增加一个标志，供程序决定是否需要返回
  44          //一个0长度的数据包。
  45          uint8 NeedZeroPacket;
  46          
  47          //当前的配置值。只有在设置非0配置后
  48          uint8 ConfigValue;
  49          
  50          //端点1缓冲是否忙的标志。当缓冲区中有数据时，该标志为真。
  51          //当缓冲区中空闲时，该标志为假。
  52          uint8 Ep1InIsBusy;
  53          
  54          //端点2缓冲是否忙的标志。当缓冲区中有数据时，该标志为真。
  55          //当缓冲区中空闲时，该标志为假。
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 2   

  56          uint8 Ep2InIsBusy;
  57          
  58          //返回了多少次报告的计数器
  59          uint32 Count=0;
  60          
  61          //USB设备描述符的定义
  62          code uint8 DeviceDescriptor[0x12]=  //设备描述符为18字节
  63          {
  64          //bLength字段。设备描述符的长度为18(0x12)字节
  65           0x12,
  66           
  67          //bDescriptorType字段。设备描述符的编号为0x01
  68           0x01,
  69           
  70          //bcdUSB字段。这里设置版本为USB1.1，即0x0110。
  71          //由于是小端结构，所以低字节在先，即0x10，0x01。
  72           0x10,
  73           0x01,
  74           
  75          //bDeviceClass字段。用户自定义USB设备，代码为0xFF
  76           0xFF,
  77           
  78          //bDeviceSubClass字段。为0，没有规定子类。
  79           0x00,
  80           
  81          //bDeviceProtocol字段。为0，没有规定协议。
  82           0x00,
  83           
  84          //bMaxPacketSize0字段。PDIUSBD12的端点0大小的16字节。
  85           0x10,
  86           
  87          //idVender字段。厂商ID号，我们这里取0x8888，仅供实验用。
  88          //实际产品不能随便使用厂商ID号，必须跟USB协会申请厂商ID号。
  89          //注意小端模式，低字节在先。
  90           0x88,
  91           0x88,
  92           
  93          //idProduct字段。产品ID号，由于是第11个实验，我们这里取0x000B。
  94          //注意小端模式，低字节应该在前。
  95           0x0B,
  96           0x00,
  97           
  98          //bcdDevice字段。设备版本号，取1.0版，即0x0100。
  99          //小端模式，低字节在先。
 100           0x00,
 101           0x01,
 102           
 103          //iManufacturer字段。厂商字符串的索引值，为了方便记忆和管理，
 104          //字符串索引就从1开始吧。
 105           0x01,
 106          
 107          //iProduct字段。产品字符串的索引值。刚刚用了1，这里就取2吧。
 108          //注意字符串索引值不要使用相同的值。
 109           0x02,
 110           
 111          //iSerialNumber字段。设备的序列号字符串索引值。
 112          //这里取3就可以了。
 113           0x03,
 114          
 115          //bNumConfigurations字段。该设备所具有的配置数。
 116          //我们只需要一种配置就行了，因此该值设置为1。
 117           0x01
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 3   

 118          };
 119          //////////////////////////设备描述符完毕//////////////////////////////
 120          
 121          //USB配置描述符集合的定义
 122          //配置描述符总长度为9+9+7+7+7+7字节
 123          code uint8 ConfigurationDescriptor[9+9+7+7+7+7]=
 124          {
 125           /***************配置描述符***********************/
 126           //bLength字段。配置描述符的长度为9字节。
 127           0x09,
 128           
 129           //bDescriptorType字段。配置描述符编号为0x02。
 130           0x02,
 131           
 132           //wTotalLength字段。配置描述符集合的总长度，
 133           //包括配置描述符本身、接口描述符、类描述符、端点描述符等。
 134           sizeof(ConfigurationDescriptor)&0xFF, //低字节
 135           (sizeof(ConfigurationDescriptor)>>8)&0xFF, //高字节
 136           
 137           //bNumInterfaces字段。该配置包含的接口数，只有一个接口。
 138           0x01,
 139           
 140           //bConfiguration字段。该配置的值为1。
 141           0x01,
 142           
 143           //iConfigurationz字段，该配置的字符串索引。这里没有，为0。
 144           0x00,
 145           
 146           //bmAttributes字段，该设备的属性。由于我们的板子是总线供电的，
 147           //并且我们不想实现远程唤醒的功能，所以该字段的值为0x80。
 148           0x80,
 149           
 150           //bMaxPower字段，该设备需要的最大电流量。由于我们的板子
 151           //需要的电流不到100mA，因此我们这里设置为100mA。由于每单位
 152           //电流为2mA，所以这里设置为50(0x32)。
 153           0x32,
 154           
 155           /*******************接口描述符*********************/
 156           //bLength字段。接口描述符的长度为9字节。
 157           0x09,
 158           
 159           //bDescriptorType字段。接口描述符的编号为0x04。
 160           0x04,
 161           
 162           //bInterfaceNumber字段。该接口的编号，第一个接口，编号为0。
 163           0x00,
 164           
 165           //bAlternateSetting字段。该接口的备用编号，为0。
 166           0x00,
 167           
 168           //bNumEndpoints字段。非0端点的数目。本实例需要四个端点，因此该值为4。
 169           0x04,
 170           
 171           //bInterfaceClass字段。该接口所使用的类，未指定。该设备类在设备描述符中已指定。
 172           0x00,
 173           
 174           //bInterfaceSubClass字段。该接口所使用的子类，未指定
 175           0x00,
 176           
 177           //bInterfaceProtocol字段。该接口所使用的协议，未指定。
 178           0x00,
 179           
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 4   

 180           //iConfiguration字段。该接口的字符串索引值。这里没有，为0。
 181           0x00,
 182           
 183           /**********************中断输入端点描述符***********************/
 184           //bLength字段。端点描述符长度为7字节。
 185           0x07,
 186           
 187           //bDescriptorType字段。端点描述符编号为0x05。
 188           0x05,
 189           
 190           //bEndpointAddress字段。端点的地址。我们使用D12的输入端点1。
 191           //D7位表示数据方向，输入端点D7为1。所以输入端点1的地址为0x81。
 192           0x81,
 193           
 194           //bmAttributes字段。D1~D0为端点传输类型选择。
 195           //该端点为中断端点。中断端点的编号为3。其它位保留为0。
 196           0x03,
 197           
 198           //wMaxPacketSize字段。该端点的最大包长。端点1的最大包长为16字节。
 199           //注意低字节在先。
 200           0x10,
 201           0x00,
 202           
 203           //bInterval字段。端点查询的时间，我们设置为10个帧时间，即10ms。
 204           0x0A,
 205           
 206           /**********************中断输出端点描述符***********************/
 207           //bLength字段。端点描述符长度为7字节。
 208           0x07,
 209           
 210           //bDescriptorType字段。端点描述符编号为0x05。
 211           0x05,
 212           
 213           //bEndpointAddress字段。端点的地址。我们使用D12的输出端点1。
 214           //D7位表示数据方向，输出端点D7为0。所以输出端点1的地址为0x01。
 215           0x01,
 216           
 217           //bmAttributes字段。D1~D0为端点传输类型选择。
 218           //该端点为中断端点。中断端点的编号为3。其它位保留为0。
 219           0x03,
 220           
 221           //wMaxPacketSize字段。该端点的最大包长。端点1的最大包长为16字节。
 222           //注意低字节在先。
 223           0x10,
 224           0x00,
 225           
 226           //bInterval字段。端点查询的时间，我们设置为10个帧时间，即10ms。
 227           0x0A,
 228           
 229            /*************** 批量输入端点2描述符 ******************/
 230           //bLength字段。端点描述符长度为7字节。
 231           0x07,
 232           
 233           //bDescriptorType字段。端点描述符编号为0x05。
 234           0x05,
 235           
 236           //bEndpointAddress字段。端点的地址。我们使用D12的输入端点2。
 237           //D7位表示数据方向，输入端点D7为1。所以输入端点2的地址为0x82。
 238           0x82,
 239           
 240           //bmAttributes字段。D1~D0为端点传输类型选择。
 241           //该端点为批量端点，批量端点的编号为0x02。其它位保留为0。
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 5   

 242           0x02,
 243           
 244           //wMaxPacketSize字段。该端点的最大包长。端点2的最大包长为64字节。
 245           //注意低字节在先。
 246           0x40,
 247           0x00,
 248           
 249           //bInterval字段。端点查询的时间，这里对批量端点无效。
 250           0x00,
 251           
 252           /*************** 批量输出端点2描述符 ******************/
 253           //bLength字段。端点描述符长度为7字节。
 254           0x07,
 255           
 256           //bDescriptorType字段。端点描述符编号为0x05。
 257           0x05,
 258           
 259           //bEndpointAddress字段。端点的地址。我们使用D12的输出端点2。
 260           //D7位表示数据方向，输出端点D7为0。所以输出端点2的地址为0x02。
 261           0x02,
 262           
 263           //bmAttributes字段。D1~D0为端点传输类型选择。
 264           //该端点为批量端点，批量端点的编号为0x02。其它位保留为0。
 265           0x02,
 266           
 267           //wMaxPacketSize字段。该端点的最大包长。端点2的最大包长为64字节。
 268           //注意低字节在先。
 269           0x40,
 270           0x00,
 271           
 272           //bInterval字段。端点查询的时间，这里对批量端点无效。
 273           0x00
 274          };
 275          ////////////////////////配置描述符集合完毕//////////////////////////
 276          
 277          /************************语言ID的定义********************/
 278          code uint8 LanguageId[4]=
 279          {
 280           0x04, //本描述符的长度
 281           0x03, //字符串描述符
 282           //0x0409为美式英语的ID
 283           0x09,
 284           0x04
 285          };
 286          ////////////////////////语言ID完毕//////////////////////////////////
 287          
 288          /**************************************************/
 289          /*********        本转换结果来自         **********/
 290          /********* Http://computer00.21ic.org    **********/
 291          /*********        作者: 电脑圈圈         **********/
 292          /*********         欢迎大家使用          **********/
 293          /*********    版权所有，盗版请写明出处   **********/
 294          /**************************************************/
 295          
 296          //http://computer00.21ic.org/user1/2198/archives/2007/42769.html
 297          //字符串“电脑圈圈的USB专区 Http://group.ednchina.com/93/”的Unicode编码
 298          //8位小端格式
 299          code uint8 ManufacturerStringDescriptor[82]={
 300          82,         //该描述符的长度为82字节
 301          0x03,       //字符串描述符的类型编码为0x03
 302          0x35, 0x75, //电
 303          0x11, 0x81, //脑
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 6   

 304          0x08, 0x57, //圈
 305          0x08, 0x57, //圈
 306          0x84, 0x76, //的
 307          0x55, 0x00, //U
 308          0x53, 0x00, //S
 309          0x42, 0x00, //B
 310          0x13, 0x4e, //专
 311          0x3a, 0x53, //区
 312          0x20, 0x00, // 
 313          0x48, 0x00, //H
 314          0x74, 0x00, //t
 315          0x74, 0x00, //t
 316          0x70, 0x00, //p
 317          0x3a, 0x00, //:
 318          0x2f, 0x00, ///
 319          0x2f, 0x00, ///
 320          0x67, 0x00, //g
 321          0x72, 0x00, //r
 322          0x6f, 0x00, //o
 323          0x75, 0x00, //u
 324          0x70, 0x00, //p
 325          0x2e, 0x00, //.
 326          0x65, 0x00, //e
 327          0x64, 0x00, //d
 328          0x6e, 0x00, //n
 329          0x63, 0x00, //c
 330          0x68, 0x00, //h
 331          0x69, 0x00, //i
 332          0x6e, 0x00, //n
 333          0x61, 0x00, //a
 334          0x2e, 0x00, //.
 335          0x63, 0x00, //c
 336          0x6f, 0x00, //o
 337          0x6d, 0x00, //m
 338          0x2f, 0x00, ///
 339          0x39, 0x00, //9
 340          0x33, 0x00, //3
 341          0x2f, 0x00  ///
 342          };
 343          /////////////////////////厂商字符串结束/////////////////////////////
 344          
 345          //字符串“《圈圈教你玩USB》之用户自定义的USB设备”的Unicode编码
 346          //8位小端格式
 347          code uint8 ProductStringDescriptor[46]={
 348          46,         //该描述符的长度为46字节
 349          0x03,       //字符串描述符的类型编码为0x03
 350          0x0a, 0x30, //《
 351          0x08, 0x57, //圈
 352          0x08, 0x57, //圈
 353          0x59, 0x65, //教
 354          0x60, 0x4f, //你
 355          0xa9, 0x73, //玩
 356          0x55, 0x00, //U
 357          0x53, 0x00, //S
 358          0x42, 0x00, //B
 359          0x0b, 0x30, //》
 360          0x4b, 0x4e, //之
 361          0x28, 0x75, //用
 362          0x37, 0x62, //户
 363          0xea, 0x81, //自
 364          0x9a, 0x5b, //定
 365          0x49, 0x4e, //义
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 7   

 366          0x84, 0x76, //的
 367          0x55, 0x00, //U
 368          0x53, 0x00, //S
 369          0x42, 0x00, //B
 370          0xbe, 0x8b, //设
 371          0x07, 0x59, //备
 372          
 373          };
 374          ////////////////////////产品字符串结束////////////////////////////
 375          
 376          //字符串“2008-08-22”的Unicode编码
 377          //8位小端格式
 378          code uint8 SerialNumberStringDescriptor[22]={
 379          22,         //该描述符的长度为22字节
 380          0x03,       //字符串描述符的类型编码为0x03
 381          0x32, 0x00, //2
 382          0x30, 0x00, //0
 383          0x30, 0x00, //0
 384          0x38, 0x00, //8
 385          0x2d, 0x00, //-
 386          0x30, 0x00, //0
 387          0x38, 0x00, //8
 388          0x2d, 0x00, //-
 389          0x32, 0x00, //2
 390          0x32, 0x00  //2
 391          };
 392          //////////////////////产品序列号字符串结束/////////////////////////
 393          
 394          /********************************************************************
 395          函数功能：延时x毫秒函数。
 396          入口参数：x：延时的毫秒数。
 397          返    回：无。
 398          备    注：无。
 399          ********************************************************************/
 400          void DelayXms(uint16 x)                
 401          {
 402   1       uint16 i;
 403   1       uint16 j;
 404   1       for(i=0;i<x;i++)
 405   1       for(j=0;j<227;j++); //循环语句延时
 406   1      }
 407          ////////////////////////End of function//////////////////////////////
 408          
 409          /********************************************************************
 410          函数功能：USB断开连接函数。
 411          入口参数：无。
 412          返    回：无。
 413          备    注：无。
 414          ********************************************************************/
 415          void UsbDisconnect(void)
 416          {
 417   1      #ifdef DEBUG0
               Prints("断开USB连接。\r\n");
              #endif
 420   1       D12WriteCommand(D12_SET_MODE);  //写设置模式命令
 421   1       D12WriteByte(0x06); //设置模式的第一字节
 422   1       D12WriteByte(0x47); //设置模式的第二字节
 423   1       DelayXms(1000);  //延迟1秒
 424   1      }
 425          ////////////////////////End of function//////////////////////////////
 426          
 427          /********************************************************************
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 8   

 428          函数功能：USB连接函数。
 429          入口参数：无。
 430          返    回：无。
 431          备    注：无。
 432          ********************************************************************/
 433          void UsbConnect(void)
 434          {
 435   1      #ifdef DEBUG0
               Prints("连接USB。\r\n");
              #endif
 438   1       D12WriteCommand(D12_SET_MODE);  //写设置模式命令
 439   1       D12WriteByte(0x16); //设置模式的第一字节
 440   1       D12WriteByte(0x47); //设置模式的第二字节
 441   1      }
 442          ////////////////////////End of function//////////////////////////////
 443          
 444          /********************************************************************
 445          函数功能：总线挂起中断处理函数。
 446          入口参数：无。
 447          返    回：无。
 448          备    注：无。
 449          ********************************************************************/
 450          void UsbBusSuspend(void)
 451          {
 452   1      #ifdef DEBUG0
               Prints("USB总线挂起。\r\n");
              #endif
 455   1      }
 456          ////////////////////////End of function//////////////////////////////
 457          
 458          /********************************************************************
 459          函数功能：总线复位中断处理函数。
 460          入口参数：无。
 461          返    回：无。
 462          备    注：无。
 463          ********************************************************************/
 464          void UsbBusReset(void)
 465          {
 466   1      #ifdef DEBUG0
               Prints("USB总线复位。\r\n");
              #endif
 469   1       Ep1InIsBusy=0; //复位后端点1输入缓冲区空闲。
 470   1       Ep2InIsBusy=0; //复位后端点2输入缓冲区空闲。
 471   1       UartBufferOutputPoint=0;
 472   1       UartBufferInputPoint=0;
 473   1       UartByteCount=0;
 474   1       UsbEp2ByteCount=0;
 475   1       UsbEp2BufferOutputPoint=0;
 476   1      }
 477          ////////////////////////End of function//////////////////////////////
 478          
 479          /********************************************************************
 480          函数功能：根据pData和SendLength将数据发送到端点0的函数。
 481          入口参数：无。
 482          返    回：无。
 483          备    注：无。
 484          ********************************************************************/
 485          void UsbEp0SendData(void)
 486          {
 487   1       //将数据写到端点中去准备发送
 488   1       //写之前要先判断一下需要发送的数据是否比端点0
 489   1       //最大长度大，如果超过端点大小，则一次只能发送
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 9   

 490   1       //最大包长的数据。端点0的最大包长在DeviceDescriptor[7]
 491   1       if(SendLength>DeviceDescriptor[7])
 492   1       {
 493   2        //按最大包长度发送
 494   2        D12WriteEndpointBuffer(1,DeviceDescriptor[7],pSendData);
 495   2        //发送后剩余字节数减少最大包长
 496   2        SendLength-=DeviceDescriptor[7];
 497   2        //发送一次后指针位置要调整
 498   2        pSendData+= DeviceDescriptor[7];
 499   2       }
 500   1       else
 501   1       {
 502   2        if(SendLength!=0)
 503   2        {
 504   3         //不够最大包长，可以直接发送
 505   3         D12WriteEndpointBuffer(1,SendLength,pSendData);
 506   3         //发送完毕后，SendLength长度变为0
 507   3         SendLength=0;
 508   3        }
 509   2        else //如果要发送的数据包长度为0
 510   2        {
 511   3         if(NeedZeroPacket==1) //如果需要发送0长度数据
 512   3         {
 513   4          D12WriteEndpointBuffer(1,0,pSendData); //发送0长度数据包
 514   4          NeedZeroPacket=0; //清需要发送0长度数据包标志
 515   4         }
 516   3        }
 517   2       }
 518   1      }
 519          ////////////////////////End of function//////////////////////////////
 520          
 521          /********************************************************************
 522          函数功能：端点0输出中断处理函数。
 523          入口参数：无。
 524          返    回：无。
 525          备    注：无。
 526          ********************************************************************/
 527          void UsbEp0Out(void)
 528          {
 529   1      #ifdef DEBUG0
               Prints("USB端点0输出中断。\r\n");
              #endif
 532   1       //读取端点0输出最后传输状态，该操作清除中断标志
 533   1       //并判断第5位是否为1，如果是，则说明是建立包
 534   1       if(D12ReadEndpointLastStatus(0)&0x20)
 535   1       {
 536   2        D12ReadEndpointBuffer(0,16,Buffer); //读建立过程数据
 537   2        D12AcknowledgeSetup(); //应答建立包
 538   2        D12ClearBuffer(); //清缓冲区
 539   2        //将缓冲数据填到设备请求的各字段中
 540   2        bmRequestType=Buffer[0];
 541   2        bRequest=Buffer[1];
 542   2        wValue=Buffer[2]+(((uint16)Buffer[3])<<8);
 543   2        wIndex=Buffer[4]+(((uint16)Buffer[5])<<8);
 544   2        wLength=Buffer[6]+(((uint16)Buffer[7])<<8);
 545   2        //下面的代码判断具体的请求，并根据不同的请求进行相关操作
 546   2        //如果D7位为1，则说明是输入请求
 547   2        if((bmRequestType&0x80)==0x80)
 548   2        {
 549   3         //根据bmRequestType的D6~5位散转，D6~5位表示请求的类型
 550   3         //0为标准请求，1为类请求，2为厂商请求。
 551   3         switch((bmRequestType>>5)&0x03)
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 10  

 552   3         {
 553   4          case 0:  //标准请求
 554   4           #ifdef DEBUG0
                    Prints("USB标准输入请求：");
                   #endif
 557   4           //USB协议定义了几个标准输入请求，我们实现这些标准请求即可
 558   4           //请求的代码在bRequest中，对不同的请求代码进行散转
 559   4           //事实上，我们还需要对接收者进行散转，因为不同的请求接收者
 560   4           //是不一样的。接收者在bmRequestType的D4~D0位中定义。
 561   4           //我们这里为了简化操作，有些就省略了对接收者的判断。
 562   4           //例如获取描述符的请求，只根据描述符的类型来区别。
 563   4           switch(bRequest)
 564   4           {
 565   5            case GET_CONFIGURATION: //获取配置
 566   5             #ifdef DEBUG0
                      Prints("获取配置。\r\n");
                     #endif
 569   5            break;
 570   5            
 571   5            case GET_DESCRIPTOR:  //获取描述符
 572   5             #ifdef DEBUG0
                      Prints("获取描述符――");
                     #endif
 575   5             //对描述符类型进行散转，对于全速设备，
 576   5             //标准请求只支持发送到设备的设备、配置、字符串三种描述符
 577   5             switch((wValue>>8)&0xFF)
 578   5              {
 579   6               case DEVICE_DESCRIPTOR: //设备描述符
 580   6                #ifdef DEBUG0
                         Prints("设备描述符。\r\n");
                        #endif
 583   6                pSendData=DeviceDescriptor;  //需要发送的数据
 584   6                //判断请求的字节数是否比实际需要发送的字节数多
 585   6                //这里请求的是设备描述符，因此数据长度就是
 586   6                //DeviceDescriptor[0]。如果请求的比实际的长，
 587   6                //那么只返回实际长度的数据
 588   6                if(wLength>DeviceDescriptor[0])
 589   6                {
 590   7                 SendLength=DeviceDescriptor[0];
 591   7                 if(SendLength%DeviceDescriptor[7]==0) //并且刚好是整数个数据包时
 592   7                 {
 593   8                  NeedZeroPacket=1; //需要返回0长度的数据包
 594   8                 }
 595   7                }
 596   6                else
 597   6                {
 598   7                 SendLength=wLength;
 599   7                }
 600   6                //将数据通过EP0返回
 601   6                UsbEp0SendData();
 602   6               break;
 603   6               
 604   6               case CONFIGURATION_DESCRIPTOR:  //配置描述符
 605   6                #ifdef DEBUG0
                         Prints("配置描述符。\r\n");
                        #endif
 608   6                pSendData=ConfigurationDescriptor; //需要发送的数据为配置描述符
 609   6                //判断请求的字节数是否比实际需要发送的字节数多
 610   6                //这里请求的是配置描述符集合，因此数据长度就是
 611   6                //ConfigurationDescriptor[3]*256+ConfigurationDescriptor[2]。
 612   6                //如果请求的比实际的长，那么只返回实际长度的数据
 613   6                SendLength=ConfigurationDescriptor[3];
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 11  

 614   6                SendLength=SendLength*256+ConfigurationDescriptor[2];
 615   6                if(wLength>SendLength)
 616   6                {
 617   7                 if(SendLength%DeviceDescriptor[7]==0) //并且刚好是整数个数据包时
 618   7                 {
 619   8                  NeedZeroPacket=1; //需要返回0长度的数据包
 620   8                 }
 621   7                }
 622   6                else
 623   6                {
 624   7                 SendLength=wLength;
 625   7                }
 626   6                //将数据通过EP0返回
 627   6                UsbEp0SendData();
 628   6               break;
 629   6               
 630   6               case STRING_DESCRIPTOR:  //字符串描述符
 631   6                #ifdef DEBUG0
                         Prints("字符串描述符");
                        #endif
 634   6                switch(wValue&0xFF)  //根据wValue的低字节（索引值）散转
 635   6                {
 636   7                 case 0:  //获取语言ID
 637   7                  #ifdef DEBUG0
                           Prints("(语言ID)。\r\n");
                          #endif
 640   7                  pSendData=LanguageId;
 641   7                  SendLength=LanguageId[0];
 642   7                 break;
 643   7                 
 644   7                 case 1:  //厂商字符串的索引值为1，所以这里为厂商字符串
 645   7                 #ifdef DEBUG0
                           Prints("(厂商描述)。\r\n");
                          #endif
 648   7                  pSendData=ManufacturerStringDescriptor;
 649   7                  SendLength=ManufacturerStringDescriptor[0];
 650   7                 break;
 651   7                 
 652   7                 case 2:  //产品字符串的索引值为2，所以这里为产品字符串
 653   7                 #ifdef DEBUG0
                           Prints("(产品描述)。\r\n");
                          #endif
 656   7                  pSendData=ProductStringDescriptor;
 657   7                  SendLength=ProductStringDescriptor[0];
 658   7                 break;
 659   7                 
 660   7                 case 3:  //产品序列号的索引值为3，所以这里为序列号
 661   7                 #ifdef DEBUG0
                           Prints("(产品序列号)。\r\n");
                          #endif
 664   7                  pSendData=SerialNumberStringDescriptor;
 665   7                  SendLength=SerialNumberStringDescriptor[0];
 666   7                 break;
 667   7                 
 668   7                 default :
 669   7                  #ifdef DEBUG0
                           Prints("(未知的索引值)。\r\n");
                          #endif
 672   7                  //对于未知索引值的请求，返回一个0长度的包
 673   7                  SendLength=0;
 674   7                  NeedZeroPacket=1;
 675   7                 break;
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 12  

 676   7                }
 677   6                //判断请求的字节数是否比实际需要发送的字节数多
 678   6                //如果请求的比实际的长，那么只返回实际长度的数据
 679   6                if(wLength>SendLength)
 680   6                {
 681   7                 if(SendLength%DeviceDescriptor[7]==0) //并且刚好是整数个数据包时
 682   7                 {
 683   8                  NeedZeroPacket=1; //需要返回0长度的数据包
 684   8                 }
 685   7                }
 686   6                else
 687   6                {
 688   7                 SendLength=wLength;
 689   7                }
 690   6                //将数据通过EP0返回
 691   6                UsbEp0SendData();         
 692   6               break;
 693   6      
 694   6               case REPORT_DESCRIPTOR:  //报告描述符
 695   6                #ifdef DEBUG0
                         Prints("报告描述符。\r\n");
                        #endif
 698   6               break;
 699   6                       
 700   6               default:  //其它描述符
 701   6                #ifdef DEBUG0
                         Prints("其他描述符，描述符代码：");
                         PrintHex((wValue>>8)&0xFF);
                         Prints("\r\n");
                        #endif
 706   6               break;
 707   6              }
 708   5             break;
 709   5            
 710   5            case GET_INTERFACE: //获取接口
 711   5             #ifdef DEBUG0
                      Prints("获取接口。\r\n");
                     #endif
 714   5            break;
 715   5            
 716   5            case GET_STATUS: //获取状态
 717   5             #ifdef DEBUG0
                      Prints("获取状态。\r\n");
                     #endif
 720   5            break;
 721   5            
 722   5            case SYNCH_FRAME: //同步帧
 723   5             #ifdef DEBUG0
                      Prints("同步帧。\r\n");
                     #endif
 726   5            break;
 727   5            
 728   5            default:  //未定义的标准请求
 729   5             #ifdef DEBUG0
                      Prints("错误：未定义的标准输入请求。\r\n");
                     #endif       
 732   5            break;
 733   5           }
 734   4          break;
 735   4          
 736   4          case 1:  //类请求
 737   4           #ifdef DEBUG0
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 13  

                    Prints("USB类输入请求：\r\n");
                   #endif
 740   4          break;
 741   4          
 742   4          case 2:  //厂商请求
 743   4           #ifdef DEBUG0
                    Prints("USB厂商输入请求：\r\n");
                   #endif
 746   4          break;
 747   4          
 748   4          default: //未定义的请求。这里只显示一个报错信息。
 749   4           #ifdef DEBUG0
                    Prints("错误：未定义的输入请求。\r\n");
                   #endif
 752   4          break;
 753   4         }
 754   3        }
 755   2        //否则说明是输出请求
 756   2        else //if(bmRequestType&0x80==0x80)之else
 757   2        {
 758   3         //根据bmRequestType的D6~5位散转，D6~5位表示请求的类型
 759   3         //0为标准请求，1为类请求，2为厂商请求。
 760   3         switch((bmRequestType>>5)&0x03)
 761   3         {
 762   4          case 0:  //标准请求
 763   4           #ifdef DEBUG0
                    Prints("USB标准输出请求：");
                   #endif
 766   4           //USB协议定义了几个标准输出请求，我们实现这些标准请求即可
 767   4           //请求的代码在bRequest中，对不同的请求代码进行散转
 768   4           switch(bRequest)
 769   4           {
 770   5            case CLEAR_FEATURE: //清除特性
 771   5             #ifdef DEBUG0
                      Prints("清除特性。\r\n");
                     #endif
 774   5            break;
 775   5            
 776   5            case SET_ADDRESS:  //设置地址
 777   5             #ifdef DEBUG0
                      Prints("设置地址。地址为：");
                      PrintHex(wValue&0xFF); //显示所设置的地址
                      Prints("\r\n");
                     #endif
 782   5             D12SetAddress(wValue&0xFF); //wValue中的低字节是设置的地址值
 783   5             //设置地址没有数据过程，直接进入到状态过程，返回一个0长度的数据包
 784   5             SendLength=0;
 785   5             NeedZeroPacket=1;
 786   5             //将数据通过EP0返回
 787   5             UsbEp0SendData();
 788   5            break;
 789   5            
 790   5            case SET_CONFIGURATION: //设置配置
 791   5             #ifdef DEBUG0
                      Prints("设置配置。\r\n");
                     #endif
 794   5             //使能非0端点。非0端点只有在设置为非0的配置后才能使能。
 795   5             //wValue的低字节为配置的值，如果该值为非0，才能使能非0端点。
 796   5             //保存当前配置值
 797   5             ConfigValue=wValue&0xFF;
 798   5             D12SetEndpointEnable(ConfigValue);
 799   5             //返回一个0长度的状态数据包
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 14  

 800   5             SendLength=0;
 801   5             NeedZeroPacket=1;
 802   5             //将数据通过EP0返回
 803   5             UsbEp0SendData();
 804   5            break;
 805   5            
 806   5            case SET_DESCRIPTOR: //设置描述符
 807   5             #ifdef DEBUG0
                      Prints("设置描述符。\r\n");
                     #endif
 810   5            break;
 811   5            
 812   5            case SET_FEATURE: //设置特性
 813   5             #ifdef DEBUG0
                      Prints("设置特性。\r\n");
                     #endif
 816   5            break;
 817   5      
 818   5            case SET_INTERFACE: //设置接口
 819   5             #ifdef DEBUG0
                      Prints("设置接口。\r\n");
                     #endif
 822   5            break;      
 823   5            
 824   5            default:  //未定义的标准请求
 825   5             #ifdef DEBUG0
                      Prints("错误：未定义的标准输出请求。\r\n");
                     #endif       
 828   5            break;
 829   5           }
 830   4          break;
 831   4          
 832   4          case 1:  //类请求
 833   4           #ifdef DEBUG0
                    Prints("USB类输出请求：");
                   #endif
 836   4           switch(bRequest)
 837   4           {
 838   5            case SET_IDLE:
 839   5             #ifdef DEBUG0
                      Prints("设置空闲。\r\n");
                     #endif
 842   5             //只需要返回一个0长度的数据包即可
 843   5             SendLength=0;
 844   5             NeedZeroPacket=1;
 845   5             //将数据通过EP0返回
 846   5             UsbEp0SendData();
 847   5            break;
 848   5            
 849   5            default:
 850   5             #ifdef DEBUG0
                      Prints("未知请求。\r\n");
                     #endif
 853   5            break;
 854   5           }
 855   4          break;
 856   4          
 857   4          case 2:  //厂商请求
 858   4           #ifdef DEBUG0
                    Prints("USB厂商输出请求：\r\n");
                   #endif
 861   4          break;
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 15  

 862   4          
 863   4          default: //未定义的请求。这里只显示一个报错信息。
 864   4           #ifdef DEBUG0
                    Prints("错误：未定义的输出请求。\r\n");
                   #endif
 867   4          break;
 868   4         }
 869   3        }
 870   2       }
 871   1       //普通数据输出
 872   1       else //if(D12ReadEndpointLastStatus(0)&0x20)之else
 873   1       {
 874   2        D12ReadEndpointBuffer(0,16,Buffer);
 875   2        D12ClearBuffer();
 876   2       }
 877   1      }
 878          ////////////////////////End of function//////////////////////////////
 879          
 880          /********************************************************************
 881          函数功能：端点0输入中断处理函数。
 882          入口参数：无。
 883          返    回：无。
 884          备    注：无。
 885          ********************************************************************/
 886          void UsbEp0In(void)
 887          {
 888   1      #ifdef DEBUG0
               Prints("USB端点0输入中断。\r\n");
              #endif
 891   1       //读最后发送状态，这将清除端点0的中断标志位
 892   1       D12ReadEndpointLastStatus(1);
 893   1       //发送剩余的字节数
 894   1       UsbEp0SendData();
 895   1      }
 896          ////////////////////////End of function//////////////////////////////
 897          
 898          /********************************************************************
 899          函数功能：端点1输出中断处理函数。
 900          入口参数：无。
 901          返    回：无。
 902          备    注：无。
 903          ********************************************************************/
 904          void UsbEp1Out(void)
 905          {
 906   1       uint8 Buf[8]; //用来保存8字节的输出输出。
 907   1      #ifdef DEBUG0
               Prints("USB端点1输出中断。\r\n");
              #endif
 910   1       //读端点最后状态，这将清除端点1输出的中断标志位
 911   1       D12ReadEndpointLastStatus(2);
 912   1       //从端点1输出缓冲读回8字节数据
 913   1       D12ReadEndpointBuffer(2,8,Buf);
 914   1       //清除端点缓冲区
 915   1       D12ClearBuffer();
 916   1       
 917   1       //输出数据第一字节为LED状态，某位为1时，表示LED亮。
 918   1       LEDs=~Buf[0];
 919   1       
 920   1       //输出数据的第二字节非0时，清除发送计数器Count。
 921   1       if(Buf[1]!=0)
 922   1       {
 923   2        Count=0;
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 16  

 924   2       }
 925   1      }
 926          ////////////////////////End of function//////////////////////////////
 927          
 928          /********************************************************************
 929          函数功能：端点1输入中断处理函数。
 930          入口参数：无。
 931          返    回：无。
 932          备    注：无。
 933          ********************************************************************/
 934          void UsbEp1In(void)
 935          {
 936   1      #ifdef DEBUG0
               Prints("USB端点1输入中断。\r\n");
              #endif
 939   1       //读最后发送状态，这将清除端点1输入的中断标志位
 940   1       D12ReadEndpointLastStatus(3);
 941   1       //端点1输入处于空闲状态
 942   1       Ep1InIsBusy=0;
 943   1      }
 944          ////////////////////////End of function//////////////////////////////
 945          
 946          /********************************************************************
 947          函数功能：端点2输出中断处理函数。
 948          入口参数：无。
 949          返    回：无。
 950          备    注：无。
 951          ********************************************************************/
 952          void UsbEp2Out(void)
 953          {
 954   1      #ifdef DEBUG0
               Prints("USB端点2输出中断。\r\n");
              #endif
 957   1       //如果缓冲区中的数据还未通过串口发送完毕，则暂时不处理该中断，直接返回。
 958   1       if(UsbEp2ByteCount!=0)return;
 959   1      
 960   1      /* 旧版代码，有BUG。修改在函数返回时清除中断
 961   1       //读最后接收状态，这将清除端点2输出的中断标志位。
 962   1       //注意端点2有个双缓冲机制，在清除中断之前，先检查是否两个缓冲区
 963   1       //是否全满了，如果两个缓冲区全满的话，就不用清除中断标志。只有当
 964   1       //两个缓冲区不全满的时候才需要清除中断标志。
 965   1       if((D12ReadEndpointStatus(4)&0x60)!=0x60)
 966   1       {
 967   1        D12ReadEndpointLastStatus(4);
 968   1       }
 969   1      */
 970   1        
 971   1       //读区端点2的数据。返回值为实际读到的数据字节数
 972   1       UsbEp2ByteCount=D12ReadEndpointBuffer(4,BUF_LEN,UsbEp2Buffer);
 973   1       //清除端点缓冲区
 974   1       D12ClearBuffer();
 975   1       
 976   1       //输出位置设为0
 977   1       UsbEp2BufferOutputPoint=0;
 978   1      
 979   1       //当两个缓冲区中都没有数据时，才能清除中断标志
 980   1       if(!(D12ReadEndpointStatus(4)&0x60))
 981   1       {
 982   2        //读最后发送状态，这将清除端点2输入的中断标志位
 983   2        D12ReadEndpointLastStatus(4);
 984   2       }
 985   1      }
C51 COMPILER V9.03   USBCORE                                                               01/17/2013 20:46:28 PAGE 17  

 986          ////////////////////////End of function//////////////////////////////
 987          
 988          /********************************************************************
 989          函数功能：端点2输入中断处理函数。
 990          入口参数：无。
 991          返    回：无。
 992          备    注：无。
 993          ********************************************************************/
 994          void UsbEp2In(void)
 995          {
 996   1      #ifdef DEBUG0
               Prints("USB端点2输入中断。\r\n");
              #endif
 999   1       //读最后发送状态，这将清除端点2输入的中断标志位
1000   1       D12ReadEndpointLastStatus(5);
1001   1       //端点2输入处于空闲状态
1002   1       Ep2InIsBusy=0;
1003   1      }
1004          ////////////////////////End of function//////////////////////////////


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    791    ----
   CONSTANT SIZE    =    218    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21       8
   IDATA SIZE       =     16    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
