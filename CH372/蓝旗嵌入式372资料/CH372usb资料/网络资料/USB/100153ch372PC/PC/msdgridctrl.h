#if !defined(AFX_MSDGRIDCTRL_H__B9C715ED_49B7_41D4_A6C7_D8185A0C59C8__INCLUDED_)
#define AFX_MSDGRIDCTRL_H__B9C715ED_49B7_41D4_A6C7_D8185A0C59C8__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class COleFont;
class CPicture;

/////////////////////////////////////////////////////////////////////////////
// CMsDgridCtrl wrapper class

class CMsDgridCtrl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CMsDgridCtrl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x28c00, 0x0, 0x0, { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	BOOL GetAllowDelete();
	void SetAllowDelete(BOOL);
	BOOL GetAllowAddNew();
	void SetAllowAddNew(BOOL);
	BOOL GetAllowRowSizing();
	void SetAllowRowSizing(BOOL);
	BOOL GetAllowUpdate();
	void SetAllowUpdate(BOOL);
	short GetAppearance();
	void SetAppearance(short);
	short GetBorderStyle();
	void SetBorderStyle(short);
	VARIANT GetBookmark();
	void SetBookmark(const VARIANT&);
	short GetCol();
	void SetCol(short);
	BOOL GetColumnHeaders();
	void SetColumnHeaders(BOOL);
	BOOL GetCurrentCellVisible();
	void SetCurrentCellVisible(BOOL);
	BOOL GetCurrentCellModified();
	void SetCurrentCellModified(BOOL);
	BOOL GetDataChanged();
	void SetDataChanged(BOOL);
	long GetDataMode();
	void SetDataMode(long);
	LPUNKNOWN GetDataSource();
	void SetDataSource(LPUNKNOWN);
	float GetDefColWidth();
	void SetDefColWidth(float);
	BOOL GetEditActive();
	void SetEditActive(BOOL);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	VARIANT GetFirstRow();
	void SetFirstRow(const VARIANT&);
	COleFont GetHeadFont();
	void SetHeadFont(LPDISPATCH);
	float GetHeadLines();
	void SetHeadLines(float);
	OLE_HANDLE GetHWnd();
	long GetHWndEditor();
	BOOL GetMarqueeUnique();
	void SetMarqueeUnique(BOOL);
	long GetMarqueeStyle();
	void SetMarqueeStyle(long);
	BOOL GetRecordSelectors();
	void SetRecordSelectors(BOOL);
	short GetRow();
	void SetRow(short);
	long GetRowDividerStyle();
	void SetRowDividerStyle(long);
	float GetRowHeight();
	void SetRowHeight(float);
	long GetScrollBars();
	void SetScrollBars(long);
	long GetSelLength();
	void SetSelLength(long);
	long GetSelStart();
	void SetSelStart(long);
	CString GetSelText();
	void SetSelText(LPCTSTR);
	short GetSelStartCol();
	void SetSelStartCol(short);
	short GetSelEndCol();
	void SetSelEndCol(short);
	short GetSplit();
	void SetSplit(short);
	short GetVisibleCols();
	short GetVisibleRows();
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	OLE_COLOR GetForeColor();
	void SetForeColor(OLE_COLOR);
	CString GetCaption();
	void SetCaption(LPCTSTR);
	COleFont GetFont();
	void SetFont(LPDISPATCH);
	short GetLeftCol();
	void SetLeftCol(short);
	BOOL GetAllowArrows();
	void SetAllowArrows(BOOL);
	BOOL GetTabAcrossSplits();
	void SetTabAcrossSplits(BOOL);
	long GetTabAction();
	void SetTabAction(long);
	BOOL GetWrapCellPointer();
	void SetWrapCellPointer(BOOL);
	long GetApproxCount();
	void SetApproxCount(long);
	CString GetErrorText();
	long GetAddNewMode();
	CString GetText();
	void SetText(LPCTSTR);

// Operations
public:
	void AboutBox();
	LPDISPATCH GetColumns(const VARIANT& Index);
	LPDISPATCH GetSplits(const VARIANT& Index);
	VARIANT GetSelBookmarks(const VARIANT& Index);
	short ColContaining(float X);
	VARIANT GetBookmark(long RowNum);
	void ReBind();
	VARIANT RowBookmark(short RowNum);
	short RowContaining(float Y);
	float RowTop(short RowNum);
	void Scroll(long Cols, long Rows);
	void Refresh();
	CPicture CaptureImage();
	void ClearSelCols();
	void ClearFields();
	void HoldFields();
	short SplitContaining(float X, float Y);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_MSDGRIDCTRL_H__B9C715ED_49B7_41D4_A6C7_D8185A0C59C8__INCLUDED_)
